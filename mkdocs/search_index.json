{
    "docs": [
        {
            "location": "/",
            "text": "<style>\n  .lead {\n    color: #555;\n    font-weight: normal;\n  }\n\n  .btn-default {\n    background-image: linear-gradient(#fff, #fff 60%, #f5f5f5);\n    border-bottom: 1px solid #e6e6e6;\n  }\n\n  .head-banner-text {\n    padding: 20px 0 0 0;\n  }\n  .head-banner-buttons {\n    padding: 0 0 20px;\n  }  \n\n\n\n\n\n    \n\n        \n\n        \n\n            \n\n            \n\n            \n\n        \n\n\n        \n\n            \n\n                \n\n                    \n                   \n                \n\n                \n\n                    \n\n                \n\n                \n\n                    \n\n                \n\n            \n\n\n            \n\n            \n\n                \n\n                \nPrevious\n\n            \n\n            \n\n                \n\n                \nNext\n\n            \n\n    \n\n\n\n\n\n\n    \n\n        Open-Source Microservice Framework for nodejs (Preview)\n\n    \n\n\n\n\n\n\n    \n\n        \nDownload\n\n    \n\n    \n\n        \nView On GitHub\n\n    \n\n\n\n\n\n\n    \n\n        \nFeatures\n\n        \n\n            \n\n            \nFully deployable on Docker\n\n            \nHystrix command implementation (circuit-breaker, bulkhead, timeout)\n\n            \nContext propagation (user context, correlation id...)\n            \nCQRS implementation\n\n            \nFully extensible whith adapters\n\n            \nInput data validation\n\n            \nDefault implementation (MongoDb, rabbitmq, statsd, swarm)\n\n            \nAuthoring tool (Creating project from template, code generation...)\n\n            \nMetrics generation\n\n            \n\n        \n\n    \n\n    \n\n        \nEnterprise ready\n\n        \n\n            \n\n            \nDynamic configuration properties\n\n            \nService versionning\n\n            \nFeature teams and domains\n\n            \nEnvironment management\n\n            \nBuilt-in metadata service description (entry points description, service dependencies)\n\n            \nLog obfuscation for sensible data\n\n            \nUser interface management for teams\n\n            \nAutomatic metrics generation\n\n            \nMulti-tenants\n\n            \nDistributed request log aggregation with correlation-id\n\n            \n\n        \n\n    \n\n    \n\n        \nVideo overview",
            "title": "Home"
        },
        {
            "location": "/gettingStarted/",
            "text": "Creating my first microservices\n\u00b6\n\n\nIn this tutorial, we will create two micro-services, a backend service and a facade service calling the backend service.\n\n\nWe will see:\n\n\n\n\nHow to create a new service\n\n\nHow to generate a proxy class for calling another micro-service\n\n\nHow to display monitoring with hystrix dashboard\n\n\nHow to add fallback response for providing compensation when a service is down\n\n\n\n\nPrerequisites\n\u00b6\n\n\n\n\nnode >= 6.0 see \nthis link\n to install node on your machine.\n\n\ndocker version >= 1.12. See \nthis link\n to install docker.\n\n\nvulcain-cli\n You can install it with\n\n\n\n\nnpm install vulcain-cli -g\n\n\n\n\n\nCreating the backend service\n\u00b6\n\n\nCreating a new microservice project is easy with \nvulcain-cli\n. The following command creates a new project\nfrom a template into the current directory. This template provides a sample customer management service.\n\n\nvulcain new customers-service\n\n\n\n\n\nThis template is fully operational, you can go to the code, and test it directly in local mode\nusing \nhttp://localhost:8080/api\n with curl or postman.\n\n\n\n\nInfo\n\n\nVulcain templates are predefined to be used with \nvscode\n or \nwebstorm\n.\n\n\n\n\nTry some urls to see how \nvulcain\n works:\n\n\n\n\n\n\n\n\nurl (prefixed with localhost:8080)\n\n\nHttp Verb\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n/api/_servicedescription\n\n\nGET\n\n\nShow service description (metadata)\n\n\n\n\n\n\n/api/_servicedependencies\n\n\nGET\n\n\nShow service dependencies (metadata)\n\n\n\n\n\n\n/api\n\n\nGET\n\n\nDisplay all customers (this is the default behavior)\n\n\n\n\n\n\n/api/customer.all\n\n\nGET\n\n\nIdem\n\n\n\n\n\n\n/api/customer.create\n\n\nPOST\n\n\nCreate a customer (see below)\n\n\n\n\n\n\n/api/customer.delete\n\n\nPOST\n\n\nDelete a customer\n\n\n\n\n\n\n/api/customer.update\n\n\nPOST\n\n\nUpdate a customer\n\n\n\n\n\n\n\n\n\n\nGo to \nconcepts\n to see more infos on the vulcain protocol.\n\n\n\n\nNow we can publish this service in a local demo swarm cluster. From the project root folder type:\n\n\ndocker build -t customers-service:1.0 .\nvulcain run customers-service:1.0\n\n\n\n\n\n\n\nInfo\n\n\nyou can also use ./build.sh 1.0 to build the service.\n\n\n\n\n\n\nvulcain run\n initializes a swarm cluster if any, create a net-vulcain network and create a new docker service.\n\n\n\n\nThe service is now available with a new exposed port (30000 if this is the first service in your swarm cluster). This port is displayed when the \nvulcain run\n command ends.\n\n\nLet's try to create some customers using this new port using the \ncustomer.create\n action.\n\n\nE.g.\n\n\ncurl -XPOST localhost:30000/api/customer.create -d \n'{\"firstName\":\"Albert\", \"lastName\": \"Einstein\"}'\n -H \n'Content-Type: application/json'\n\n\n\n\n\n\nYou can list all customers with /api/customer.all (or just /api).\n\n\n\n\nWarning\n\n\nBy default, data is stored in memory and will be lost if you restart the container.\n\n\n\n\nCreating the facade service\n\u00b6\n\n\nWe will now create a new facade service exposing a customer with an additional fullName property.\n\n\nCreate a new service facade-service. In a new folder, type:\n\n\nvulcain new facade-service\n\n\n\n\n\nThen open the project and remove the \nsrc/api/samples\n folder to start with a new clean project.\n\n\nThe first thing to do is to create a model. A model (or schema) describes data manipulated by the service. It offers many\ncapabilities:\n\n\n\n\nFor input data, it is used to check and validate argument values (raising a 400 bad request error if any errors)\n\n\nFor storing data, it can be used by the \ndefault\n provider to get some persistance information like key definition, uniqueness, collection name...\n\n\nFor metadata description, it is used to display information (with /api/_servicedescription) usefull to code generation or other tools.\n\n\n\n\nCreate a new file src/api/model.ts and copy/paste the following code:\n\n\nimport\n \n{\n \nProperty\n,\n \nModel\n \n}\n \nfrom\n \n\"vulcain-corejs\"\n;\n\n\n\n@Model\n()\n\n\nexport\n \nclass\n \nCustomerView\n \n{\n\n    \n@Property\n({\n \ntype\n:\n \n'\nstring\n'\n \n})\n\n    \nfullName\n:\n \nstring\n;\n\n    \n@Property\n({\n \ntype\n:\n \n'\nstring\n'\n \n})\n\n    \nfirstName\n:\n \nstring\n;\n\n    \n@Property\n({\n \ntype\n:\n \n'\nstring\n'\n \n})\n\n    \nlastName\n:\n \nstring\n;\n\n\n}\n\n\n\n\n\n\nThis is a very basic model, it has the properties of a customer with an additional fullName property.\nSince this model will be used for output response only, no validation is added.\n\n\nNow we will create an handler to query a customer view into a new file src/api/queryHandler.ts\n\n\nimport\n \n{\n \nQueryHandler\n,\n \nQuery\n,\n \nAbstractQueryHandler\n,\n \nCommand\n,\n \nServiceDependency\n,\n \nAbstractServiceCommand\n,\n \nIHasFallbackCommand\n \n}\n \nfrom\n \n\"vulcain-corejs\"\n;\n\n\nimport\n \n{\n \nCustomersService\n,\n \nCustomer\n \n}\n \nfrom\n \n\"./customersService10\"\n;\n\n\n\n@QueryHandler\n({\n \nscope\n:\n \n'?'\n \n})\n\n\nexport\n \nclass\n \nMyQueryHandler\n \nextends\n \nAbstractQueryHandler\n \n{\n\n\n    \n@Query\n({\n \ndescription\n:\n \n\"Get a list of customers\"\n,\n \noutputSchema\n:\n \n'\nCustomerView\n'\n \n})\n\n    \nasync\n \nCustomerViewsAsync\n()\n \n{\n\n        \nlet\n \ncustomersService\n \n=\n \nnew\n \nCustomersService\n(\nthis\n.\nrequestContext\n);\n\n        \nlet\n \ncustomers\n \n=\n \nawait\n \ncustomersService\n.\ngetAllCustomerAsync\n();\n\n        \nreturn\n \ncustomers\n.\nmap\n(\nc\n \n=>\n \n{\n\n            \nreturn\n \n{\n\n                \nfirstName\n:\n \nc\n.\nfirstName\n,\n\n                \nlastName\n:\n \nc\n.\nlastName\n,\n\n                \nfullName\n:\n \nc\n.\nfirstName\n \n+\n \n' '\n \n+\n \nc\n.\nlastName\n\n            \n};\n\n        \n});\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\n\nInfo\n\n\nFor the moment, the editor displays errors. This is normal. We will see below how to remove the reference error on customersService10\n\n\n\n\nHandler anatomy\n\u00b6\n\n\n\n\nAn handler is just a class with annoted methods. These annotations describe how the handler can be requested. There are 3 kinds of handler: \nQuery handler\n, \nAction handler\n and \nEvent handler\n. See \nconcepts\n\n\nThe \nQueryHandler\n annotation tells that the class exposes handler(s) for query (accessible with a GET http verb) and can define default configurations. In this case, the handler could be requested by any (anonymous) user thanks to the \nscope:'?'\n property.\n\n\nThe \nQuery\n annotation is used to expose a method. Annotations have mandatory properties used to describe the service. The query will be accessible from \n/api/customersview\n (The name is inferred from the method name removing the Async suffix).\n\n\nThe handler code is like any traditional method with some specificities:\n\n\nIt can take only one argument described by a model. This model will be validated before the method is called and can raise a Bad Request error in case of errors.\n\n\nThe return value must be described by a model (can be the same as the input argument). This is used to describe the service.\n\n\nIf any error occurs during processing the handler, a 500 http error will be sent to the client.\n\n\n\n\n\n\n\n\nNow it's time to remove errors from your code.\nYou can note that the service uses a custom service class (\nCustomersService\n) to read all customers. This is a proxy class requesting our first service : customers-service.\n\n\nBut how can i create this proxy class ?\n\n\nCommunication between services\n\u00b6\n\n\nThanks to the metadata description hability of any vulcain service, we can use dedicated tooling to generate code. Code generation uses template to generate a static class with typed method sending request that are high tolerance, monitored and vulcain compatible.\n\n\nVulcain compatible means context propagation : security context, global correlation id, tenant information...\n\n\nTo generate the proxy class, we need some information:\n\n\n\n\nAddress of the target service. In our case, localhost:30000\n\n\nA template to use, by default this is microServiceProxy (for generating vulcain proxy). The other template available is angularServiceProxy to generate proxy class for angular application.\n\n\nThe folder where the generated file will be saved. Default is the current folder.\n\n\n\n\nTo generate the class, type the following code from the application root folder (Change the port number if necessary)\n\n\nvulcain generate --address localhost:30000 --folder src/api\n\n\n\n\n\nThe proxy class encapsulates all requests into \nhystrix commands\n providing circuit breaker, timeout, bulkhead and monitoring.\n\n\nNow you can compile and test the service locally with:\n\n\ncurl http://localhost:8080/api/customerviews\n\n\n\n\n\nResult depends of how many customers you created before, but note the standardized response format.\n\n\nMonitoring command request with hystrix dashboard\n\u00b6\n\n\nTo enable hystrix monitoring, just set the variable \nenableHystrixStream\n to \ntrue\n in startup.ts.\n\n\nTo visualize metrics, we need to start hystrix dashboard with the following command:\n\n\ndocker service create --network net-vulcain -p \n9999\n:9002 --name hystrix-dashboard mlabouardy/hystrix-dashboard:latest\n\n\n\n\n\nThen open the dashboard on \nhttp://localhost:9999/hyxtrix\n, set the service endpoint with \nhttp://<host ip>:8080/hystrix.stream\n and click on \nMonitor Stream\n.\n\n\nYou can test monitoring by calling many requests.\nFor example with :\n\n\nab -n \n200\n http://localhost:8080/api/customerviews\n\n\n\n\n\nYou must see something like this:\n\n\n\n\n\n\nInfo\n\n\nNote how the service ip address changes depending on where you call it. To test the service, you can use \nlocalhost\n but since hystrix is running within a container you must provide the host ip.\n\n\nIf the service were deployed as a swarm service, you can access it with a standardized DNS name corresponding to the service name + its version (removing all special characters).\n\n\nFor example, if you deploy the service with \nvulcain run service-facade:1.0\n, you can monitor it with the address \nhttp://servicefacade10:8080/hystrix.stream\n.\n\n\n\n\nFailure compensation\n\u00b6\n\n\nCalling microservice over http is not a long quiet stream, many errors can occur and you must be prepared for this.\nFor this situation, \nvulcain\n uses an hystrix implementation of command. You can configure the command behavior with annotation. For example, the following command has a 1500ms timeout protecting from long requests.\n\n\n@Command\n({\n \nexecutionTimeoutInMilliseconds\n:\n \n1500\n \n})\n\n\nexport\n \nclass\n \nCustomersServiceGetAllCustomerCommand\n \nextends\n \nAbstractServiceCommand\n \n{\n\n\n\n}\n\n\n\n\n\n\nThis is the microservice philosophy : Service can failed but quickly.\n\n\nFor most scenarii, if the request failed it's better to send a default response than an error message. This is the role of the compensation (fallBack) method.\n\n\nTry a request failure by removing the backend service with \ndocker service rm customersservice10\n and by requesting again the facade service. Due to the default 1500ms timeout, errors will occur quickly.\nYou can see it in hystrix dashboard.\n\n\n\n\nBefore adding a compensation, we need to understand how the service proxy class works. This class provides a method for each endpoints (handlers) of the target service. Every time a call is made to an endpoint, a (hystrix) command is created by the proxy to encapsulate this call. By default, all calls of the same proxy use the same command named \n<service name>Command\n.\n\n\nIf you need to customize a call, you need to customize a command but only for this specific call. To do that, the proxy class will check for every call if a specific command exists for this call otherwise it will use the default command. A specific command is identified by a name like \n<service name><method name>Command\n.\n\n\nSince we will customize a call to \ngetAllCustomerAsync\n of the proxy class named \nCustomersService\n we need to create a new command named \nCustomersServiceGetAllCustomer\n (Async is always removed for naming).\n\n\nTo add compensation we need to provide a \nfallback\n method returning the default value.\n\n\nYou can now create a new file in src/api/ containing the new command.\n\n\nimport\n \n{\n \nServiceDependency\n,\n \nCommand\n,\n \nAbstractServiceCommand\n,\n \nIHasFallbackCommand\n \n}\n \nfrom\n \n'\nvulcain\n-\ncorejs\n'\n;\n\n\nimport\n \n{\n \nCustomer\n \n}\n \nfrom\n \n'\n./\ncustomersService10\n'\n;\n\n\n\n@Command\n({\n \nexecutionTimeoutInMilliseconds\n:\n \n1500\n \n})\n\n\n@ServiceDependency\n(\n'\ncustomers\n-\nservice\n'\n,\n \n'\n1.0\n'\n,\n \n'\nhttp\n:\n//localhost:30000/api/_servicedescription')\n\n\nexport\n \nclass\n \nCustomersServiceGetAllCustomerCommand\n \nextends\n \nAbstractServiceCommand\n\n    \nimplements\n \nIHasFallbackCommand\n<\nCustomer\n[]>\n \n{\n\n    \nasync\n \nfallbackAsync\n():\n \nPromise\n<\nCustomer\n[]>\n \n{\n\n        \nreturn\n \n[{\n\n            \nfirstName\n:\n \n\"John\"\n,\n \nlastName\n:\n \n\"Lennon\"\n\n        \n}];\n\n    \n}\n\n\n}\n\n\n\n\n\n\nAnnotations are copied from the default generated command. You can see how to set timeout delay and how to define informations used for service description.\n\n\nFallback method is called on every error during the request including timeout.\n\n\nNow if you request the facade service, the compensation response will be returned.",
            "title": "Getting started"
        },
        {
            "location": "/gettingStarted/#creating-my-first-microservices",
            "text": "In this tutorial, we will create two micro-services, a backend service and a facade service calling the backend service.  We will see:   How to create a new service  How to generate a proxy class for calling another micro-service  How to display monitoring with hystrix dashboard  How to add fallback response for providing compensation when a service is down",
            "title": "Creating my first microservices"
        },
        {
            "location": "/gettingStarted/#prerequisites",
            "text": "node >= 6.0 see  this link  to install node on your machine.  docker version >= 1.12. See  this link  to install docker.  vulcain-cli  You can install it with   npm install vulcain-cli -g",
            "title": "Prerequisites"
        },
        {
            "location": "/gettingStarted/#creating-the-backend-service",
            "text": "Creating a new microservice project is easy with  vulcain-cli . The following command creates a new project\nfrom a template into the current directory. This template provides a sample customer management service.  vulcain new customers-service  This template is fully operational, you can go to the code, and test it directly in local mode\nusing  http://localhost:8080/api  with curl or postman.   Info  Vulcain templates are predefined to be used with  vscode  or  webstorm .   Try some urls to see how  vulcain  works:     url (prefixed with localhost:8080)  Http Verb  Description      /api/_servicedescription  GET  Show service description (metadata)    /api/_servicedependencies  GET  Show service dependencies (metadata)    /api  GET  Display all customers (this is the default behavior)    /api/customer.all  GET  Idem    /api/customer.create  POST  Create a customer (see below)    /api/customer.delete  POST  Delete a customer    /api/customer.update  POST  Update a customer      Go to  concepts  to see more infos on the vulcain protocol.   Now we can publish this service in a local demo swarm cluster. From the project root folder type:  docker build -t customers-service:1.0 .\nvulcain run customers-service:1.0   Info  you can also use ./build.sh 1.0 to build the service.    vulcain run  initializes a swarm cluster if any, create a net-vulcain network and create a new docker service.   The service is now available with a new exposed port (30000 if this is the first service in your swarm cluster). This port is displayed when the  vulcain run  command ends.  Let's try to create some customers using this new port using the  customer.create  action.  E.g.  curl -XPOST localhost:30000/api/customer.create -d  '{\"firstName\":\"Albert\", \"lastName\": \"Einstein\"}'  -H  'Content-Type: application/json'   You can list all customers with /api/customer.all (or just /api).   Warning  By default, data is stored in memory and will be lost if you restart the container.",
            "title": "Creating the backend service"
        },
        {
            "location": "/gettingStarted/#creating-the-facade-service",
            "text": "We will now create a new facade service exposing a customer with an additional fullName property.  Create a new service facade-service. In a new folder, type:  vulcain new facade-service  Then open the project and remove the  src/api/samples  folder to start with a new clean project.  The first thing to do is to create a model. A model (or schema) describes data manipulated by the service. It offers many\ncapabilities:   For input data, it is used to check and validate argument values (raising a 400 bad request error if any errors)  For storing data, it can be used by the  default  provider to get some persistance information like key definition, uniqueness, collection name...  For metadata description, it is used to display information (with /api/_servicedescription) usefull to code generation or other tools.   Create a new file src/api/model.ts and copy/paste the following code:  import   {   Property ,   Model   }   from   \"vulcain-corejs\" ;  @Model ()  export   class   CustomerView   { \n     @Property ({   type :   ' string '   }) \n     fullName :   string ; \n     @Property ({   type :   ' string '   }) \n     firstName :   string ; \n     @Property ({   type :   ' string '   }) \n     lastName :   string ;  }   This is a very basic model, it has the properties of a customer with an additional fullName property.\nSince this model will be used for output response only, no validation is added.  Now we will create an handler to query a customer view into a new file src/api/queryHandler.ts  import   {   QueryHandler ,   Query ,   AbstractQueryHandler ,   Command ,   ServiceDependency ,   AbstractServiceCommand ,   IHasFallbackCommand   }   from   \"vulcain-corejs\" ;  import   {   CustomersService ,   Customer   }   from   \"./customersService10\" ;  @QueryHandler ({   scope :   '?'   })  export   class   MyQueryHandler   extends   AbstractQueryHandler   { \n\n     @Query ({   description :   \"Get a list of customers\" ,   outputSchema :   ' CustomerView '   }) \n     async   CustomerViewsAsync ()   { \n         let   customersService   =   new   CustomersService ( this . requestContext ); \n         let   customers   =   await   customersService . getAllCustomerAsync (); \n         return   customers . map ( c   =>   { \n             return   { \n                 firstName :   c . firstName , \n                 lastName :   c . lastName , \n                 fullName :   c . firstName   +   ' '   +   c . lastName \n             }; \n         }); \n     }  }    Info  For the moment, the editor displays errors. This is normal. We will see below how to remove the reference error on customersService10",
            "title": "Creating the facade service"
        },
        {
            "location": "/gettingStarted/#handler-anatomy",
            "text": "An handler is just a class with annoted methods. These annotations describe how the handler can be requested. There are 3 kinds of handler:  Query handler ,  Action handler  and  Event handler . See  concepts  The  QueryHandler  annotation tells that the class exposes handler(s) for query (accessible with a GET http verb) and can define default configurations. In this case, the handler could be requested by any (anonymous) user thanks to the  scope:'?'  property.  The  Query  annotation is used to expose a method. Annotations have mandatory properties used to describe the service. The query will be accessible from  /api/customersview  (The name is inferred from the method name removing the Async suffix).  The handler code is like any traditional method with some specificities:  It can take only one argument described by a model. This model will be validated before the method is called and can raise a Bad Request error in case of errors.  The return value must be described by a model (can be the same as the input argument). This is used to describe the service.  If any error occurs during processing the handler, a 500 http error will be sent to the client.     Now it's time to remove errors from your code.\nYou can note that the service uses a custom service class ( CustomersService ) to read all customers. This is a proxy class requesting our first service : customers-service.  But how can i create this proxy class ?",
            "title": "Handler anatomy"
        },
        {
            "location": "/gettingStarted/#communication-between-services",
            "text": "Thanks to the metadata description hability of any vulcain service, we can use dedicated tooling to generate code. Code generation uses template to generate a static class with typed method sending request that are high tolerance, monitored and vulcain compatible.  Vulcain compatible means context propagation : security context, global correlation id, tenant information...  To generate the proxy class, we need some information:   Address of the target service. In our case, localhost:30000  A template to use, by default this is microServiceProxy (for generating vulcain proxy). The other template available is angularServiceProxy to generate proxy class for angular application.  The folder where the generated file will be saved. Default is the current folder.   To generate the class, type the following code from the application root folder (Change the port number if necessary)  vulcain generate --address localhost:30000 --folder src/api  The proxy class encapsulates all requests into  hystrix commands  providing circuit breaker, timeout, bulkhead and monitoring.  Now you can compile and test the service locally with:  curl http://localhost:8080/api/customerviews  Result depends of how many customers you created before, but note the standardized response format.",
            "title": "Communication between services"
        },
        {
            "location": "/gettingStarted/#monitoring-command-request-with-hystrix-dashboard",
            "text": "To enable hystrix monitoring, just set the variable  enableHystrixStream  to  true  in startup.ts.  To visualize metrics, we need to start hystrix dashboard with the following command:  docker service create --network net-vulcain -p  9999 :9002 --name hystrix-dashboard mlabouardy/hystrix-dashboard:latest  Then open the dashboard on  http://localhost:9999/hyxtrix , set the service endpoint with  http://<host ip>:8080/hystrix.stream  and click on  Monitor Stream .  You can test monitoring by calling many requests.\nFor example with :  ab -n  200  http://localhost:8080/api/customerviews  You must see something like this:    Info  Note how the service ip address changes depending on where you call it. To test the service, you can use  localhost  but since hystrix is running within a container you must provide the host ip.  If the service were deployed as a swarm service, you can access it with a standardized DNS name corresponding to the service name + its version (removing all special characters).  For example, if you deploy the service with  vulcain run service-facade:1.0 , you can monitor it with the address  http://servicefacade10:8080/hystrix.stream .",
            "title": "Monitoring command request with hystrix dashboard"
        },
        {
            "location": "/gettingStarted/#failure-compensation",
            "text": "Calling microservice over http is not a long quiet stream, many errors can occur and you must be prepared for this.\nFor this situation,  vulcain  uses an hystrix implementation of command. You can configure the command behavior with annotation. For example, the following command has a 1500ms timeout protecting from long requests.  @Command ({   executionTimeoutInMilliseconds :   1500   })  export   class   CustomersServiceGetAllCustomerCommand   extends   AbstractServiceCommand   {  }   This is the microservice philosophy : Service can failed but quickly.  For most scenarii, if the request failed it's better to send a default response than an error message. This is the role of the compensation (fallBack) method.  Try a request failure by removing the backend service with  docker service rm customersservice10  and by requesting again the facade service. Due to the default 1500ms timeout, errors will occur quickly.\nYou can see it in hystrix dashboard.   Before adding a compensation, we need to understand how the service proxy class works. This class provides a method for each endpoints (handlers) of the target service. Every time a call is made to an endpoint, a (hystrix) command is created by the proxy to encapsulate this call. By default, all calls of the same proxy use the same command named  <service name>Command .  If you need to customize a call, you need to customize a command but only for this specific call. To do that, the proxy class will check for every call if a specific command exists for this call otherwise it will use the default command. A specific command is identified by a name like  <service name><method name>Command .  Since we will customize a call to  getAllCustomerAsync  of the proxy class named  CustomersService  we need to create a new command named  CustomersServiceGetAllCustomer  (Async is always removed for naming).  To add compensation we need to provide a  fallback  method returning the default value.  You can now create a new file in src/api/ containing the new command.  import   {   ServiceDependency ,   Command ,   AbstractServiceCommand ,   IHasFallbackCommand   }   from   ' vulcain - corejs ' ;  import   {   Customer   }   from   ' ./ customersService10 ' ;  @Command ({   executionTimeoutInMilliseconds :   1500   })  @ServiceDependency ( ' customers - service ' ,   ' 1.0 ' ,   ' http : //localhost:30000/api/_servicedescription')  export   class   CustomersServiceGetAllCustomerCommand   extends   AbstractServiceCommand \n     implements   IHasFallbackCommand < Customer []>   { \n     async   fallbackAsync ():   Promise < Customer []>   { \n         return   [{ \n             firstName :   \"John\" ,   lastName :   \"Lennon\" \n         }]; \n     }  }   Annotations are copied from the default generated command. You can see how to set timeout delay and how to define informations used for service description.  Fallback method is called on every error during the request including timeout.  Now if you request the facade service, the compensation response will be returned.",
            "title": "Failure compensation"
        },
        {
            "location": "/reference/",
            "text": "Documentation\n\u00b6\n\n\nDocumentation is in progress\n\n\nVulcain\n is a microservice framework. It provides a way to easily create fully operational microservices running in docker container by normalizing i/o protocol, metrics and logging.\n\n\nEvery \nvulcain\n microservice encapsulates its own metadata description allowing to use external tools for generating code, services cartography, monitoring...\n\n\nVulcain\n natively implements some well-know patterns like DDD, CQRS, hystrix command, dynamic configuration, dependency injection and event driving development.\n\n\nIt targets Nodejs V6 (or more) platform and leverages all typescript functionalities such as annotations, async/await, reflection...\n\n\nVulcain philosophy\n\u00b6\n\n\nMain features\n\u00b6\n\n\n\n\nUses typescript annotations to declare endpoints.\n\n\nStandardized request and response HTTP format\n\n\nGenerate metrics for every request (zipkin, statsd)\n\n\nStandardized logging format with data obfuscation for sensible data.\n\n\nServices are organized by domain and separate query request from action (command) request.\n\n\nAutomatic input data validation\n\n\nRequest context propagation (security, correlation id) on every service request.\n\n\nUses hystrix command to encapsulate all i/o (http, database, service communication, ...)\n\n\nFully extensible thanks to dependency injection.\n\n\nProvides default adapters to quickly start with mongodb, zipkin, rabbitmq...\n\n\n\n\nMain concepts\n\u00b6\n\n\nThis a basic schema showing how a \nvulcain\n service works:\n\n\n\n\nHandler\n\u00b6\n\n\nThe first concept to understand how \nvulcain\n works is \nhandler\n which define service endpoint. There is three kind of handler:\n\n\n\n\nQuery\n handler can not manipulate data and has no side effect, it just returns data.\n\n\nAction\n handler can modify data and can be asynchronous. Every action raises an event once it completes.\n\n\nEvent\n handler subscribes to event. Event can be filtered by domain, action, schema and any more.\n\n\n\n\nCommand\n\u00b6\n\n\nAnother important concept is \nCommand\n which encapsulates all i/o access.",
            "title": "Overview"
        },
        {
            "location": "/reference/#documentation",
            "text": "Documentation is in progress  Vulcain  is a microservice framework. It provides a way to easily create fully operational microservices running in docker container by normalizing i/o protocol, metrics and logging.  Every  vulcain  microservice encapsulates its own metadata description allowing to use external tools for generating code, services cartography, monitoring...  Vulcain  natively implements some well-know patterns like DDD, CQRS, hystrix command, dynamic configuration, dependency injection and event driving development.  It targets Nodejs V6 (or more) platform and leverages all typescript functionalities such as annotations, async/await, reflection...",
            "title": "Documentation"
        },
        {
            "location": "/reference/#vulcain-philosophy",
            "text": "",
            "title": "Vulcain philosophy"
        },
        {
            "location": "/reference/#main-features",
            "text": "Uses typescript annotations to declare endpoints.  Standardized request and response HTTP format  Generate metrics for every request (zipkin, statsd)  Standardized logging format with data obfuscation for sensible data.  Services are organized by domain and separate query request from action (command) request.  Automatic input data validation  Request context propagation (security, correlation id) on every service request.  Uses hystrix command to encapsulate all i/o (http, database, service communication, ...)  Fully extensible thanks to dependency injection.  Provides default adapters to quickly start with mongodb, zipkin, rabbitmq...",
            "title": "Main features"
        },
        {
            "location": "/reference/#main-concepts",
            "text": "This a basic schema showing how a  vulcain  service works:",
            "title": "Main concepts"
        },
        {
            "location": "/reference/#handler",
            "text": "The first concept to understand how  vulcain  works is  handler  which define service endpoint. There is three kind of handler:   Query  handler can not manipulate data and has no side effect, it just returns data.  Action  handler can modify data and can be asynchronous. Every action raises an event once it completes.  Event  handler subscribes to event. Event can be filtered by domain, action, schema and any more.",
            "title": "Handler"
        },
        {
            "location": "/reference/#command",
            "text": "Another important concept is  Command  which encapsulates all i/o access.",
            "title": "Command"
        },
        {
            "location": "/reference/actions/",
            "text": "Action handler\n\u00b6\n\n\nAction handler is defined with the \nActionHandler\n and \nAction\n annotations.\n\n\nThe first indicates that a class implements one (or more) action handler. It has two main behaviors : It defines some default configurations used by all handler defined in the class and, it registers the class in the dependency manager.\n\n\nThe latter must be set on every handler method, it can override every properties of the \nActionHandler\n annotations.\n\n\nhandler definition\n\u00b6\n\n\n@ActionHandler\n({\n \nasync\n:\n \nfalse\n,\n \nscope\n:\n \n\"?\"\n,\n \nschema\n:\n \nCustomer\n \n})\n\n\nexport\n \nclass\n \nCustomerActionHandler\n \nextends\n \nDefaultActionHandler\n \n{\n\n\n    \n@Action\n({\n \ndescription\n:\n \n\"Custom action\"\n,\n \noutputSchema\n:\n \n\"string\"\n \n})\n\n    \nasync\n \nmyActionAsync\n()\n \n{\n\n\n    \n}\n\n\n}\n\n\n\n\n\n\nThis code defines an action handler and can be requested by \nPOST\ning to \n/api/Customer.myaction\n.\n\n\nCustomer.action\n is called \nverb\n following the pattern <schema>.<action name>.\n\n\n\n\nInfo\n\n\nschema can be undefined so the \nverb\n is simply the action name.\n\n\n\n\nAction handler properties\n\u00b6\n\n\n\n\n\n\n\n\nProperty\n\n\nRequired\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nscope\n\n\nyes\n\n\nDefine authorization. See how to define \nscope\n\n\n\n\n\n\n\n\ndescription\n\n\nyes\n\n\nGlobal definition\n\n\n\n\n\n\n\n\nschema\n\n\n\n\nSchema manipulates by the handler. It must be a \ndomain\n schema\n\n\n\n\n\n\n\n\nasync\n\n\n\n\nIf true, handler will be process asynchronously\n\n\nfalse\n\n\n\n\n\n\neventMode\n\n\n\n\nDefine how to raise event when the handler completes\n\n\nsuccessOnly\n\n\n\n\n\n\nserviceName\n\n\n\n\nName to identify the handler class in the \ndependency container\n\n\nclass name\n\n\n\n\n\n\nserviceLifeTime\n\n\n\n\nDependency component lifetime\n\n\nScoped\n\n\n\n\n\n\nenableOnTestOnly\n\n\n\n\nEnable this handler only on test mode\n\n\nfalse\n\n\n\n\n\n\n\n\nHandler properties\n\u00b6\n\n\n\n\n\n\n\n\nProperty\n\n\nRequired\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nscope\n\n\n\n\nDefine authorization. See how to define \nscope\n\n\nfrom ActionHandler\n\n\n\n\n\n\ndescription\n\n\nyes\n\n\nHandler description\n\n\n\n\n\n\n\n\naction\n\n\n\n\nAction name\n\n\nInferred from the method name (minus Async prefix if any)\n\n\n\n\n\n\ninputSchema\n\n\n\n\nargument schema. Must be a \ndomain\n schema\n\n\nArgument type\n\n\n\n\n\n\noutputSchema\n\n\nyes\n\n\nSchema of the return value. It must be a \ndomain\n schema\n\n\n\n\n\n\n\n\nschema\n\n\n\n\nSchema manipulates by the handler. It must be a \ndomain\n schema\n\n\nfrom ActionHandler\n\n\n\n\n\n\nasync\n\n\n\n\nIf true, handler will be process asynchronously\n\n\nfrom ActionHandler\n\n\n\n\n\n\neventMode\n\n\n\n\nDefine how to raise event when the handler completes\n\n\nfrom ActionHandler\n\n\n\n\n\n\n\n\n\n\nInfo\n\n\ninputSchema\n,\noutputSchema\nand\ndescription\n properties are used for metadata description.\n\n\n\n\nStandardized protocol\n\u00b6\n\n\nVulcain\n uses a standardized way for all query and action handlers.\n\n\nEndpoint\n\u00b6\n\n\nAll endpoint action address format is \n/api/<verb>\n with \nverb\n equals to <schema>.<action name> and must be called with a \nPOST\n http verb.\n\n\nverb\n is optional but should be defined within the post body with the \nschema\n and \naction\n properties.\n\n\nBody must contains a json object with the following format :\n\n\n\n\n\n\n\n\nProperty\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nschema\n\n\n\n\n\n\n\n\naction\n\n\n\n\n\n\n\n\nparams\n\n\n\n\n\n\n\n\n\n\nAsynchronous action task\n\u00b6",
            "title": "Actions"
        },
        {
            "location": "/reference/actions/#action-handler",
            "text": "Action handler is defined with the  ActionHandler  and  Action  annotations.  The first indicates that a class implements one (or more) action handler. It has two main behaviors : It defines some default configurations used by all handler defined in the class and, it registers the class in the dependency manager.  The latter must be set on every handler method, it can override every properties of the  ActionHandler  annotations.",
            "title": "Action handler"
        },
        {
            "location": "/reference/actions/#handler-definition",
            "text": "@ActionHandler ({   async :   false ,   scope :   \"?\" ,   schema :   Customer   })  export   class   CustomerActionHandler   extends   DefaultActionHandler   { \n\n     @Action ({   description :   \"Custom action\" ,   outputSchema :   \"string\"   }) \n     async   myActionAsync ()   { \n\n     }  }   This code defines an action handler and can be requested by  POST ing to  /api/Customer.myaction .  Customer.action  is called  verb  following the pattern <schema>.<action name>.   Info  schema can be undefined so the  verb  is simply the action name.",
            "title": "handler definition"
        },
        {
            "location": "/reference/actions/#action-handler-properties",
            "text": "Property  Required  Description  Default      scope  yes  Define authorization. See how to define  scope     description  yes  Global definition     schema   Schema manipulates by the handler. It must be a  domain  schema     async   If true, handler will be process asynchronously  false    eventMode   Define how to raise event when the handler completes  successOnly    serviceName   Name to identify the handler class in the  dependency container  class name    serviceLifeTime   Dependency component lifetime  Scoped    enableOnTestOnly   Enable this handler only on test mode  false",
            "title": "Action handler properties"
        },
        {
            "location": "/reference/actions/#handler-properties",
            "text": "Property  Required  Description  Default      scope   Define authorization. See how to define  scope  from ActionHandler    description  yes  Handler description     action   Action name  Inferred from the method name (minus Async prefix if any)    inputSchema   argument schema. Must be a  domain  schema  Argument type    outputSchema  yes  Schema of the return value. It must be a  domain  schema     schema   Schema manipulates by the handler. It must be a  domain  schema  from ActionHandler    async   If true, handler will be process asynchronously  from ActionHandler    eventMode   Define how to raise event when the handler completes  from ActionHandler      Info  inputSchema , outputSchema and description  properties are used for metadata description.",
            "title": "Handler properties"
        },
        {
            "location": "/reference/actions/#standardized-protocol",
            "text": "Vulcain  uses a standardized way for all query and action handlers.",
            "title": "Standardized protocol"
        },
        {
            "location": "/reference/actions/#endpoint",
            "text": "All endpoint action address format is  /api/<verb>  with  verb  equals to <schema>.<action name> and must be called with a  POST  http verb.  verb  is optional but should be defined within the post body with the  schema  and  action  properties.  Body must contains a json object with the following format :     Property  Description      schema     action     params",
            "title": "Endpoint"
        },
        {
            "location": "/reference/actions/#asynchronous-action-task",
            "text": "",
            "title": "Asynchronous action task"
        },
        {
            "location": "/reference/query/",
            "text": "",
            "title": "Queries"
        },
        {
            "location": "/reference/event/",
            "text": "Using events\n\u00b6",
            "title": "Events"
        },
        {
            "location": "/reference/event/#using-events",
            "text": "",
            "title": "Using events"
        },
        {
            "location": "/reference/domain/",
            "text": "Domain model\n\u00b6\n\n\nVulcain\n respects the \nbounded context\n paradigm with the \ndomain\n concept.\n\n\nAll services belong to a domain like \nCustomer\n or \nBilling\n. Domain name is defined in every startup file.\n\n\nWhat is a domain ?\n\u00b6\n\n\nThe main notion with \nbounded context\n is responsability. It's more a functional notion than a technical implementation. Implementing microservice targeting this concept is your responsability. \nVulcain\n just helps you to identify domain in its communication protocol and in event notifications.\n\n\nBut at the level of a microservice, the notion of \ndomain\n is implemented by schema description and validation.\n\n\nUsing local schema\n\u00b6\n\n\nVulcain\n provides a mechanism to define \ndomain model\n (or \nSchema\n). In the context of a \nvulcain\n microservice, this provides the following functionalities:\n\n\n\n\nDescribe data models used by a microservice and can help generating code or creating microservice description like swagger.\n\n\nValidate all input data before calling an handler.\n\n\nTransform data during validation process.\n\n\nDefine some metadata information used by default provider to persist data.\n\n\nTransform output data before sending over http\n\n\n\n\nSchemas\n are defined with annotations. All input (handler argument) must be defined even though output argument definition is not mandatory, without it you loose the possibility to generate typed code.\n\n\nDefining a schema\n\u00b6\n\n\nThanks to annotations, defining a schema is really easy.\n\n\n@Model\n()\n\n\nexport\n \nclass\n \nChild\n \n{\n\n    \n@Property\n({\n \ntype\n:\n \n'string'\n,\n \nrequired\n: \ntrue\n \n})\n\n    \nname\n: \nstring\n;\n\n\n}\n\n\n\n@Model\n({\nvalidate\n: \nCustomer.checkRule1\n})\n\n\nexport\n \nclass\n \nCustomer\n \n{\n\n    \n@Property\n({\n \ntype\n:\n \n'string'\n,\n \nrequired\n: \ntrue\n \n})\n\n    \n@Validator\n(\nSchemaStandardValidators\n.\nlength\n,\n \n{\n \nmin\n: \n5\n \n})\n\n    \nfirstName\n: \nstring\n;\n\n    \n@Property\n({\n \ntype\n:\n \n'string'\n,\n \nrequired\n: \ntrue\n,\n \nunique\n: \ntrue\n,\n \nisKey\n: \ntrue\n \n})\n\n    \nlastName\n: \nstring\n;\n\n    \n@Property\n({\n \ntype\n:\n \n'string'\n,\n \nrequired\n: \ntrue\n,\n \ntype\n: \nSchemaStandardTypes.enum\n,\n \nvalues\n:\n \n[\n'M'\n,\n \n'F'\n],\n \nbind\n: \nCustomer.bindSex\n})\n\n    \nsex\n: \nstring\n;\n\n    \n@Property\n({\ntype\n:\n'boolean'\n})\n\n    \nenabled\n \n=\n \ntrue\n;\n \n// Default value\n\n    \n@Reference\n({\ncardinality\n:\n \n'many'\n,\n \nitem\n:\n \n'Child'\n})\n\n    \nchildren\n: \nChild\n[];\n\n\n    \nstatic\n \ncheckRule1\n(\nentity\n: \nCustomer\n)\n \n{\n\n        \nif\n(\n \nentity\n.\nsex\n \n===\n \n'M'\n \n&&\n \nentity\n.\nfirstName\n \n===\n \n'john'\n \n&&\n \nentity\n.\nlastName\n \n===\n \n'doe'\n)\n\n            \nreturn\n \n\"john doe is not a valid customer\"\n;\n\n    \n}\n\n\n    \nstatic\n \nbindSex\n(\nval\n: \nstring\n)\n \n{\n\n        \nif\n(\n \nval\n \n&&\n \nval\n.\ntoLowerCase\n()\n \n===\n \n'female'\n)\n\n            \nreturn\n \n'F'\n;\n\n        \nif\n(\n \nval\n \n&&\n \nval\n.\ntoLowerCase\n()\n \n===\n \n'male'\n)\n\n            \nreturn\n \n'M'\n;\n\n    \n}\n\n\n}\n\n\n\n\n\n\n@Model\n declares a schema and can contains \n@Property\n and \n@Reference\n.\n\n\nThe @Model annotation\n\u00b6\n\n\n\n\n\n\n\n\nOption\n\n\ntype\n\n\nDescription\n\n\nDefault value\n\n\n\n\n\n\n\n\n\n\nname\n\n\nstring\n\n\nModel name\n\n\nclass name\n\n\n\n\n\n\nextends\n\n\nstring\n\n\nextending schema name\n\n\nnull\n\n\n\n\n\n\ndescription\n\n\nstring\n\n\nSchema description\n\n\nnull\n\n\n\n\n\n\nbind\n\n\n(entity) => any) or boolean\n\n\nTransform data from request data\n\n\nnull\n\n\n\n\n\n\nvalidate\n\n\n(entity, ctx?: RequestContext) => string\n\n\nCustom validation function\n\n\nnull\n\n\n\n\n\n\nstorageName\n\n\nstring\n\n\nCollection (as in MongoDb) name used by provider\n\n\nclass name\n\n\n\n\n\n\nhasSensibleData\n\n\nboolean\n\n\nThis schema has sensible data (see below)\n\n\nfalse\n\n\n\n\n\n\n\n\n*extends\n is needed because there is no way to know if a javascript object inherits from another. If you omit it, properties of the base class will be ignored.\n\n\nThe @Property annotation\n\u00b6\n\n\n\n\n\n\n\n\nOption\n\n\ntype\n\n\nDescription\n\n\nDefault value\n\n\n\n\n\n\n\n\n\n\ntype\n\n\nstring\n\n\nProperty type\n\n\n\n\n\n\n\n\ndescription\n\n\nstring\n\n\nProperty description\n\n\nnull\n\n\n\n\n\n\nrequired\n\n\nboolean\n\n\nThis property is mandatory\n\n\nfalse\n\n\n\n\n\n\nbind\n\n\n(val, entity) => any) or boolean\n\n\nTransform data from request data\n\n\nnull\n\n\n\n\n\n\nvalidate\n\n\n(val, ctx?: RequestContext) => string\n\n\nCustom validate function\n\n\nnull\n\n\n\n\n\n\nitems\n\n\nstring\n\n\nItem type for \narrayOf\n type\n\n\nnull\n\n\n\n\n\n\nvalues\n\n\nstring\n\n\nAuthorized values for \nenum\n type\n\n\nnull\n\n\n\n\n\n\nisKey\n\n\nstring\n\n\nUsed by provider\n\n\nfalse\n\n\n\n\n\n\nunique\n\n\nstring\n\n\nUsed by provider\n\n\nfalse\n\n\n\n\n\n\nsensible\n\n\nstring\n\n\nThis property is sensible and will be encrypted and protected (value hidden in logs etc...)\n\n\n\n\n\n\n\n\ndependsOn\n\n\n(entity) => boolean\n\n\nCondition to validate this property\n\n\ntrue\n\n\n\n\n\n\n\n\nThe @Reference annotation\n\u00b6\n\n\n\n\n\n\n\n\nOption\n\n\ntype\n\n\nDescription\n\n\nDefault value\n\n\n\n\n\n\n\n\n\n\ncardinality\n\n\n'many' or 'one'\n\n\nReference cardinality\n\n\n\n\n\n\n\n\nitem\n\n\nstring\n\n\nTarget type. Must be a valid schema\n\n\n\n\n\n\n\n\ndescription\n\n\nstring\n\n\nReference description\n\n\nnull\n\n\n\n\n\n\nrequired\n\n\nboolean\n\n\nThis reference is mandatory\n\n\nfalse\n\n\n\n\n\n\nbind\n\n\n(entity) => any) or boolean\n\n\nTransform data from request data\n\n\nnull\n\n\n\n\n\n\nvalidate\n\n\n(entity, ctx?: RequestContext) => string\n\n\nCustom validate function\n\n\nnull\n\n\n\n\n\n\ndependsOn\n\n\n(entity) => boolean\n\n\nCondition to validate this reference\n\n\ntrue\n\n\n\n\n\n\n\n\n\n\nYou can use \nany\n for referencing anonymous item.\n\n\nReferenced schema must be declared \nbefore\n the schema using it a reference (in the sample above \nChild\n is defined before \nCustomer\n).\n\n\n\n\nValidation process detail\n\u00b6\n\n\nWhen an handler is requested, \nvulcain\n will validate input data before calling the handler processing the following steps:\n\n\n\n\n\n\nFirst, bind body data for all schema properties and references.\n\n\n\n\nif schema contains a \nbind\n method call it and return its value.\n\n\nelse for all properties call its \nbind\n method if any or just take the value property then the declared property default value.\n\n\ncall recursivly binding for extended class if any.\n\n\nthen do binding for all referencies for any type other than \nany\n otherwise take the full dependency object.\n\n\n\n\n\n\n\n\nValidate bound data with the same strategy by replacing \nbind\n method by \nvalidate\n.\n\n\n\n\n\n\nValidate can return a list of error validation message, in this case a 400 Bad Request response is returned containing an \nerror\n property with the following format:\n\n\n\"error\"\n:\n \n{\n\n    \n\"message\"\n:\n \n\"Validation errors\"\n,\n\n    \n\"errors\"\n:\n \n[\n\n        \n{\n\n            \n\"message\"\n:\n \n\"error message\"\n,\n\n            \n\"property\"\n:\n \n\"property name\"\n,\n\n            \n\"id\"\n:\n \n\"data id\"\n \n// Property with a isKey option set to true\n\n        \n}\n\n    \n]\n\n\n}\n\n\n\n\n\n\nPredefined types and validators\n\u00b6\n\n\nA list of predefined types are available using the \nSchemaStandardTypes\n static properties :\n\n\n\n\nstring\n\n\nany\n\n\nboolean\n\n\nnumber\n\n\ninteger\n\n\nenum : use values to enumerate valid values\n\n\nuid : bind to a new uid\n\n\narrayOf : use item to define element type\n\n\nrange : use min and max property\n\n\nemail\n\n\nurl\n\n\nalphanumeric\n\n\ndate-iso8601\n\n\n\n\nCustom validation method\n\u00b6\n\n\nYou can create a custom validation method, it must return an error message or null.\n\n\nError message can contain substitution variables defined with the \n{variable_name}\n pattern :\n\n\n\n\n\n\n\n\nvariable name\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\n$value\n\n\nCurrent property value\n\n\n\n\n\n\n$propertyName\n\n\nCurrent property name\n\n\n\n\n\n\n$id\n\n\ndata id\n\n\n\n\n\n\n$schema\n\n\nschema name\n\n\n\n\n\n\nany other name without $\n\n\nanother property value\n\n\n\n\n\n\n\n\nValidators\n\u00b6\n\n\nA list of predefined validators is available using the \nSchemaStandardValidators\n static properties :\n\n\n\n\npatternValidator: use pattern to define a pattern\n\n\nlengthValidator: use min and max to define length\n\n\n\n\nDefinining custom validator\n\u00b6\n\n\nYou can customize a validation method for a specific property with the \nvalidate\n method but you can also share validation by creating custom validator.\n\n\nA validator is just a simple class with a \nvalidate\n method and properties. Properties beginning with a \n$\n will be overridden by options specified by the \n@Validator\n annotation.\n\n\nFor example, the \nlength\n validator is defined like this:\n\n\nexport\n \nclass\n \nLengthValidator\n  \n{\n\n    \npublic\n \ntype\n \n=\n \n\"string\"\n;\n \n// Must be a 'string' type\n\n    \npublic\n \n$\nmin\n \n=\n \nundefined\n;\n\n    \npublic\n \n$\nmax\n \n=\n \nundefined\n;\n\n\n    \nprivate\n \nstatic\n \nmessages\n \n=\n \n[\n\n        \n\"Property '{$propertyName}' must have at least {$min} characters.\"\n,\n\n        \n\"Property '{$propertyName}' must have no more than {$max} characters.\"\n\n    \n];\n\n    \nvalidate\n(\nval\n)\n \n{\n\n        \nlet\n \nlen\n \n=\n \nval\n.\nlength\n;\n\n        \nif\n \n(\nthis\n.\n$\nmin\n \n!==\n \nundefined\n)\n \n{\n\n            \nif\n \n(\nlen\n \n<\n \nthis\n.\n$\nmin\n)\n \nreturn\n \nthis\n.\nmessages\n[\n0\n];\n\n        \n}\n\n        \nif\n \n(\nthis\n.\n$\nmax\n \n!==\n \nundefined\n)\n \n{\n\n            \nif\n \n(\nlen\n \n>\n \nthis\n.\n$\nmax\n)\n \nreturn\n \nthis\n.\nmessages\n[\n1\n];\n\n        \n}\n\n    \n}\n\n\n}\n\n\n\n\n\n\nThe validator must be registered into the current domain with :\n\n\nconst\n \ndomain\n \n=\n \nthis\n.\ncontainer\n.\nget\n<\nDomain\n>(\nDefaultServiceNames\n.\nDomain\n);\n\n\ndomain\n.\naddValidator\n(\n\"length\"\n,\n \nnew\n \nLengthValidator\n());\n\n\n\n\n\n\nAnd can be used with:\n\n\n    \n@Validator\n(\n\"length\"\n,\n \n{\n \nmin\n:\n \n5\n,\n \nmax\n:\n \n10\n \n})\n \n// Create a new LengthValidator instance and set $min and $max properties",
            "title": "Domain models"
        },
        {
            "location": "/reference/domain/#domain-model",
            "text": "Vulcain  respects the  bounded context  paradigm with the  domain  concept.  All services belong to a domain like  Customer  or  Billing . Domain name is defined in every startup file.",
            "title": "Domain model"
        },
        {
            "location": "/reference/domain/#what-is-a-domain",
            "text": "The main notion with  bounded context  is responsability. It's more a functional notion than a technical implementation. Implementing microservice targeting this concept is your responsability.  Vulcain  just helps you to identify domain in its communication protocol and in event notifications.  But at the level of a microservice, the notion of  domain  is implemented by schema description and validation.",
            "title": "What is a domain ?"
        },
        {
            "location": "/reference/domain/#using-local-schema",
            "text": "Vulcain  provides a mechanism to define  domain model  (or  Schema ). In the context of a  vulcain  microservice, this provides the following functionalities:   Describe data models used by a microservice and can help generating code or creating microservice description like swagger.  Validate all input data before calling an handler.  Transform data during validation process.  Define some metadata information used by default provider to persist data.  Transform output data before sending over http   Schemas  are defined with annotations. All input (handler argument) must be defined even though output argument definition is not mandatory, without it you loose the possibility to generate typed code.",
            "title": "Using local schema"
        },
        {
            "location": "/reference/domain/#defining-a-schema",
            "text": "Thanks to annotations, defining a schema is really easy.  @Model ()  export   class   Child   { \n     @Property ({   type :   'string' ,   required :  true   }) \n     name :  string ;  }  @Model ({ validate :  Customer.checkRule1 })  export   class   Customer   { \n     @Property ({   type :   'string' ,   required :  true   }) \n     @Validator ( SchemaStandardValidators . length ,   {   min :  5   }) \n     firstName :  string ; \n     @Property ({   type :   'string' ,   required :  true ,   unique :  true ,   isKey :  true   }) \n     lastName :  string ; \n     @Property ({   type :   'string' ,   required :  true ,   type :  SchemaStandardTypes.enum ,   values :   [ 'M' ,   'F' ],   bind :  Customer.bindSex }) \n     sex :  string ; \n     @Property ({ type : 'boolean' }) \n     enabled   =   true ;   // Default value \n     @Reference ({ cardinality :   'many' ,   item :   'Child' }) \n     children :  Child []; \n\n     static   checkRule1 ( entity :  Customer )   { \n         if (   entity . sex   ===   'M'   &&   entity . firstName   ===   'john'   &&   entity . lastName   ===   'doe' ) \n             return   \"john doe is not a valid customer\" ; \n     } \n\n     static   bindSex ( val :  string )   { \n         if (   val   &&   val . toLowerCase ()   ===   'female' ) \n             return   'F' ; \n         if (   val   &&   val . toLowerCase ()   ===   'male' ) \n             return   'M' ; \n     }  }   @Model  declares a schema and can contains  @Property  and  @Reference .",
            "title": "Defining a schema"
        },
        {
            "location": "/reference/domain/#the-model-annotation",
            "text": "Option  type  Description  Default value      name  string  Model name  class name    extends  string  extending schema name  null    description  string  Schema description  null    bind  (entity) => any) or boolean  Transform data from request data  null    validate  (entity, ctx?: RequestContext) => string  Custom validation function  null    storageName  string  Collection (as in MongoDb) name used by provider  class name    hasSensibleData  boolean  This schema has sensible data (see below)  false     *extends  is needed because there is no way to know if a javascript object inherits from another. If you omit it, properties of the base class will be ignored.",
            "title": "The @Model annotation"
        },
        {
            "location": "/reference/domain/#the-property-annotation",
            "text": "Option  type  Description  Default value      type  string  Property type     description  string  Property description  null    required  boolean  This property is mandatory  false    bind  (val, entity) => any) or boolean  Transform data from request data  null    validate  (val, ctx?: RequestContext) => string  Custom validate function  null    items  string  Item type for  arrayOf  type  null    values  string  Authorized values for  enum  type  null    isKey  string  Used by provider  false    unique  string  Used by provider  false    sensible  string  This property is sensible and will be encrypted and protected (value hidden in logs etc...)     dependsOn  (entity) => boolean  Condition to validate this property  true",
            "title": "The @Property annotation"
        },
        {
            "location": "/reference/domain/#the-reference-annotation",
            "text": "Option  type  Description  Default value      cardinality  'many' or 'one'  Reference cardinality     item  string  Target type. Must be a valid schema     description  string  Reference description  null    required  boolean  This reference is mandatory  false    bind  (entity) => any) or boolean  Transform data from request data  null    validate  (entity, ctx?: RequestContext) => string  Custom validate function  null    dependsOn  (entity) => boolean  Condition to validate this reference  true      You can use  any  for referencing anonymous item.  Referenced schema must be declared  before  the schema using it a reference (in the sample above  Child  is defined before  Customer ).",
            "title": "The @Reference annotation"
        },
        {
            "location": "/reference/domain/#validation-process-detail",
            "text": "When an handler is requested,  vulcain  will validate input data before calling the handler processing the following steps:    First, bind body data for all schema properties and references.   if schema contains a  bind  method call it and return its value.  else for all properties call its  bind  method if any or just take the value property then the declared property default value.  call recursivly binding for extended class if any.  then do binding for all referencies for any type other than  any  otherwise take the full dependency object.     Validate bound data with the same strategy by replacing  bind  method by  validate .    Validate can return a list of error validation message, in this case a 400 Bad Request response is returned containing an  error  property with the following format:  \"error\" :   { \n     \"message\" :   \"Validation errors\" , \n     \"errors\" :   [ \n         { \n             \"message\" :   \"error message\" , \n             \"property\" :   \"property name\" , \n             \"id\" :   \"data id\"   // Property with a isKey option set to true \n         } \n     ]  }",
            "title": "Validation process detail"
        },
        {
            "location": "/reference/domain/#predefined-types-and-validators",
            "text": "A list of predefined types are available using the  SchemaStandardTypes  static properties :   string  any  boolean  number  integer  enum : use values to enumerate valid values  uid : bind to a new uid  arrayOf : use item to define element type  range : use min and max property  email  url  alphanumeric  date-iso8601",
            "title": "Predefined types and validators"
        },
        {
            "location": "/reference/domain/#custom-validation-method",
            "text": "You can create a custom validation method, it must return an error message or null.  Error message can contain substitution variables defined with the  {variable_name}  pattern :     variable name  description      $value  Current property value    $propertyName  Current property name    $id  data id    $schema  schema name    any other name without $  another property value",
            "title": "Custom validation method"
        },
        {
            "location": "/reference/domain/#validators",
            "text": "A list of predefined validators is available using the  SchemaStandardValidators  static properties :   patternValidator: use pattern to define a pattern  lengthValidator: use min and max to define length",
            "title": "Validators"
        },
        {
            "location": "/reference/domain/#definining-custom-validator",
            "text": "You can customize a validation method for a specific property with the  validate  method but you can also share validation by creating custom validator.  A validator is just a simple class with a  validate  method and properties. Properties beginning with a  $  will be overridden by options specified by the  @Validator  annotation.  For example, the  length  validator is defined like this:  export   class   LengthValidator    { \n     public   type   =   \"string\" ;   // Must be a 'string' type \n     public   $ min   =   undefined ; \n     public   $ max   =   undefined ; \n\n     private   static   messages   =   [ \n         \"Property '{$propertyName}' must have at least {$min} characters.\" , \n         \"Property '{$propertyName}' must have no more than {$max} characters.\" \n     ]; \n     validate ( val )   { \n         let   len   =   val . length ; \n         if   ( this . $ min   !==   undefined )   { \n             if   ( len   <   this . $ min )   return   this . messages [ 0 ]; \n         } \n         if   ( this . $ max   !==   undefined )   { \n             if   ( len   >   this . $ max )   return   this . messages [ 1 ]; \n         } \n     }  }   The validator must be registered into the current domain with :  const   domain   =   this . container . get < Domain >( DefaultServiceNames . Domain );  domain . addValidator ( \"length\" ,   new   LengthValidator ());   And can be used with:       @Validator ( \"length\" ,   {   min :   5 ,   max :   10   })   // Create a new LengthValidator instance and set $min and $max properties",
            "title": "Definining custom validator"
        },
        {
            "location": "/reference/injection/",
            "text": "Dependency injection\n\u00b6\n\n\nVulcain\n provides a simple \ndependency injection\n mechanism supporting \nconstructor parameters injection\n and \nSetter injection\n\n\nIt uses annotations to declare dependencies.\n\n\nDeclaring components\n\u00b6\n\n\nYou can declare component (also called service) with the \n@Injectable\n annotation.\n\n\n@\nInjectable\n(\nLifeTime\n.\nSingleton\n)\n\n\nexport\n \nclass\n \nMyComponent\n \n{}\n\n\n\n\n\n\nInjectable\n accepts three parameters:\n\n\n\n\n\n\n\n\nname\n\n\nrequired\n\n\n\n\n\n\n\n\n\n\n\n\nlifeTime\n\n\nyes\n\n\nComponent life time can be \nSingleton\n, \nScoped\n or \nTransient\n\n\n\n\n\n\ncomponent name\n\n\nfalse\n\n\ndefault to class name\n\n\n\n\n\n\nenableInTestOnly\n\n\nfalse\n\n\nRegister this component only in test mode (default false)\n\n\n\n\n\n\n\n\nwith \nlifeTime\n\n\n\n\n\n\n\n\nname\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSingleton\n\n\nOnly one instance will be created\n\n\n\n\n\n\nTransient\n\n\nA new instance is always created\n\n\n\n\n\n\nScoped\n\n\nSingleton instance by request scope\n\n\n\n\n\n\n\n\nWhen service starts, \nvulcain\n loads all components found in the \nsrc/api\n folder. You can register components from another folder with the container \ninjectFrom\n method.\n\n\nAlso you can inject components manually with the following container methods :\n\n\n\n\ninjectTransient\n\n\ninjectSingleton\n and \ninjectInstance\n\n\ninjectScoped\n\n\n\n\nIn this case, they don't need to be declared with an \n@Injectable\n annotation.\n\n\nThere are two locations to register component, both in the \nstartup\n class.\n\n\n\n\nIn the \ninitializeDefaultServices\n method - This allows you to override default services (like logging service or database provider) used by application services. This method is called before the application bootstraps.\n\n\nIn the \ninitializeServices\n method - This allows you to register custom application service (If not declared in the \nsrc/api\n folder).\n\n\n\n\n\n\nAll handlers are automatically registered as scoped service and available using their class name or \n@xxxxHandler\n serviceName option.\n\n\n\n\nUsing components\n\u00b6\n\n\nAs mentioned above, components can be injected as a constructor argument or as a setter property.\n\n\nConstruction injection\n\u00b6\n\n\nArgument must be annotated with the \n@Inject\n annotation.\n\n\nexport\n \nclass\n \nMyClass\n \n{\n\n    \nconstructor\n(\n@Inject\n(\nDefaultServiceNames\n.\nContainer\n)\n \ncontainer\n:\n \nIContainer\n,\n \n@Inject\n(\n\"MyComponent\"\n)\n \nmyComponent\n:\n \nMyComponent\n,\n \notherArg\n:\n \nstring\n)\n \n{\n\n    \n}\n\n\n}\n\n\n\n\n\n\nThe \n@Inject\n annotation has two optionals arguments:\n\n\n\n\nA name used to specify a specific name declared in the \n@Injectable\n annotation. Default is argument type name.\n\n\nA boolean named optional used to catch the error raised if the injected component doesn't exist. The default behavior is to raise an exception if the component is unknown.\n\n\n\n\nThe following rules are applied :\n\n\n\n\nUsing \n@Inject\n is mandatory to specify argument injection.\n\n\nYou can mix injected arguments with \nclassic\n arguments, \nhowever\n injected arguments must be declared first.\n\n\n\n\nSetter injection\n\u00b6\n\n\nComponent can be injected into property \nafter\n the constructor is completed.\n\n\nexport\n \nclass\n \nMyClass\n \n{\n\n    \n@Inject\n()\n\n    \nmyComponent\n:\n \nMyComponent\n;\n\n\n    \nconstructor\n(\notherArg\n:\n \nstring\n)\n \n{}\n\n\n}\n\n\n\n\n\n\nIf you want to be notified when property injection is completed, you can implement the \nIInjectionNotification\n interface \nonInjectionCompleted\n method. This method is called by the dependency injection engine.\n\n\nComponent lifetime\n\u00b6\n\n\nTo create a component with dependencies, you must instantiate it from the application container. It is available in all handlers and commands from the \ncontainer\n property.\n\n\ncontainer\n.\nget\n(\n\"component-name\"\n)\n\n\n\n\n\n\n\n\nUsing the \nnew\n keyword to instantiate a component will result to unexpected behavior.\n\n\n\n\nScoped component\n\u00b6\n\n\nScoped components are disposed when the request ends. You can provide your own component \ndispose\n method.\nAll scoped components are initialized with a \nrequestContext\n property.\n\n\nDefault services\n\u00b6\n\n\nVulcain provides predefined services available with standardized names.\nAll predefined service names are declared in a static class named \nDefaultServiceNames\n\n\n\n\n\n\n\n\nname\n\n\nservice\n\n\n\n\n\n\n\n\n\n\nContainer\n\n\nCurrent container (global) or scoped to requestContext\n\n\n\n\n\n\nTenantPolicy\n\n\nPolicy used to resolve TenantPolicy\n\n\n\n\n\n\nAuthorizationPolicy\n\n\nPolicy used to check authorization from ScopesDescriptor\n\n\n\n\n\n\nTokenService\n\n\nService to manage jwt token\n\n\n\n\n\n\nScopesDescriptor\n\n\nMetadata service describing all scopes used in the current service\n\n\n\n\n\n\nServiceDescriptors\n\n\nMetadata service  describing all service handlers\n\n\n\n\n\n\nAuthentication\n\n\nDefault authentication service\n\n\n\n\n\n\nLogger\n\n\nDefault logger\n\n\n\n\n\n\nProvider\n\n\nDefault provider (do not use it directly - Use ProviderFactory instead)\n\n\n\n\n\n\nEventBusAdapter\n\n\nEvent bus adapter\n\n\n\n\n\n\nActionBusAdapter\n\n\nAction bus adapter\n\n\n\n\n\n\nDomain\n\n\nCurrent domain definition\n\n\n\n\n\n\nApplication\n\n\nCurrent application context\n\n\n\n\n\n\nServerAdapter\n\n\nCurrent server adapter (default express adapter)\n\n\n\n\n\n\nProviderFactory\n\n\nService to use for creating providers\n\n\n\n\n\n\nMockManager\n\n\nDefault mock manager\n\n\n\n\n\n\nRequestContext\n\n\nCurrent request context\n\n\n\n\n\n\nMetrics\n\n\nManage and emit metrics\n\n\n\n\n\n\nApiKeyService\n\n\nService to manage api key\n\n\n\n\n\n\nRequestTracer\n\n\nDefault service tracer (zipkin)",
            "title": "Dependencies injection"
        },
        {
            "location": "/reference/injection/#dependency-injection",
            "text": "Vulcain  provides a simple  dependency injection  mechanism supporting  constructor parameters injection  and  Setter injection  It uses annotations to declare dependencies.",
            "title": "Dependency injection"
        },
        {
            "location": "/reference/injection/#declaring-components",
            "text": "You can declare component (also called service) with the  @Injectable  annotation.  @ Injectable ( LifeTime . Singleton )  export   class   MyComponent   {}   Injectable  accepts three parameters:     name  required       lifeTime  yes  Component life time can be  Singleton ,  Scoped  or  Transient    component name  false  default to class name    enableInTestOnly  false  Register this component only in test mode (default false)     with  lifeTime     name  Description      Singleton  Only one instance will be created    Transient  A new instance is always created    Scoped  Singleton instance by request scope     When service starts,  vulcain  loads all components found in the  src/api  folder. You can register components from another folder with the container  injectFrom  method.  Also you can inject components manually with the following container methods :   injectTransient  injectSingleton  and  injectInstance  injectScoped   In this case, they don't need to be declared with an  @Injectable  annotation.  There are two locations to register component, both in the  startup  class.   In the  initializeDefaultServices  method - This allows you to override default services (like logging service or database provider) used by application services. This method is called before the application bootstraps.  In the  initializeServices  method - This allows you to register custom application service (If not declared in the  src/api  folder).    All handlers are automatically registered as scoped service and available using their class name or  @xxxxHandler  serviceName option.",
            "title": "Declaring components"
        },
        {
            "location": "/reference/injection/#using-components",
            "text": "As mentioned above, components can be injected as a constructor argument or as a setter property.",
            "title": "Using components"
        },
        {
            "location": "/reference/injection/#construction-injection",
            "text": "Argument must be annotated with the  @Inject  annotation.  export   class   MyClass   { \n     constructor ( @Inject ( DefaultServiceNames . Container )   container :   IContainer ,   @Inject ( \"MyComponent\" )   myComponent :   MyComponent ,   otherArg :   string )   { \n     }  }   The  @Inject  annotation has two optionals arguments:   A name used to specify a specific name declared in the  @Injectable  annotation. Default is argument type name.  A boolean named optional used to catch the error raised if the injected component doesn't exist. The default behavior is to raise an exception if the component is unknown.   The following rules are applied :   Using  @Inject  is mandatory to specify argument injection.  You can mix injected arguments with  classic  arguments,  however  injected arguments must be declared first.",
            "title": "Construction injection"
        },
        {
            "location": "/reference/injection/#setter-injection",
            "text": "Component can be injected into property  after  the constructor is completed.  export   class   MyClass   { \n     @Inject () \n     myComponent :   MyComponent ; \n\n     constructor ( otherArg :   string )   {}  }   If you want to be notified when property injection is completed, you can implement the  IInjectionNotification  interface  onInjectionCompleted  method. This method is called by the dependency injection engine.",
            "title": "Setter injection"
        },
        {
            "location": "/reference/injection/#component-lifetime",
            "text": "To create a component with dependencies, you must instantiate it from the application container. It is available in all handlers and commands from the  container  property.  container . get ( \"component-name\" )    Using the  new  keyword to instantiate a component will result to unexpected behavior.",
            "title": "Component lifetime"
        },
        {
            "location": "/reference/injection/#scoped-component",
            "text": "Scoped components are disposed when the request ends. You can provide your own component  dispose  method.\nAll scoped components are initialized with a  requestContext  property.",
            "title": "Scoped component"
        },
        {
            "location": "/reference/injection/#default-services",
            "text": "Vulcain provides predefined services available with standardized names.\nAll predefined service names are declared in a static class named  DefaultServiceNames     name  service      Container  Current container (global) or scoped to requestContext    TenantPolicy  Policy used to resolve TenantPolicy    AuthorizationPolicy  Policy used to check authorization from ScopesDescriptor    TokenService  Service to manage jwt token    ScopesDescriptor  Metadata service describing all scopes used in the current service    ServiceDescriptors  Metadata service  describing all service handlers    Authentication  Default authentication service    Logger  Default logger    Provider  Default provider (do not use it directly - Use ProviderFactory instead)    EventBusAdapter  Event bus adapter    ActionBusAdapter  Action bus adapter    Domain  Current domain definition    Application  Current application context    ServerAdapter  Current server adapter (default express adapter)    ProviderFactory  Service to use for creating providers    MockManager  Default mock manager    RequestContext  Current request context    Metrics  Manage and emit metrics    ApiKeyService  Service to manage api key    RequestTracer  Default service tracer (zipkin)",
            "title": "Default services"
        },
        {
            "location": "/reference/commands/",
            "text": "Commands\n\u00b6\n\n\nCommand must be used for every I/O request. \nVulcain\n Command is a javascript implementation of \nNetflix hystrix\n forked from \nhystrixjs\n.\n\n\nVulcain\n provides three abstract commands :\n\n\n\n\nAbstractHttpCommand\n to encapsulate all http request (other than calling a vulcain service)\n\n\nAbstractServiceCommand\n to encapsulate all vulcain service call\n\n\nAbstractProviderCommand\n to encapsulate database actions.\n\n\n\n\nUsing a command\n\u00b6\n\n\nCommand must \nalways\n be instanciated with requestContext.getCommandAsync.\n\n\nCreating a command\n\u00b6",
            "title": "Commands"
        },
        {
            "location": "/reference/commands/#commands",
            "text": "Command must be used for every I/O request.  Vulcain  Command is a javascript implementation of  Netflix hystrix  forked from  hystrixjs .  Vulcain  provides three abstract commands :   AbstractHttpCommand  to encapsulate all http request (other than calling a vulcain service)  AbstractServiceCommand  to encapsulate all vulcain service call  AbstractProviderCommand  to encapsulate database actions.",
            "title": "Commands"
        },
        {
            "location": "/reference/commands/#using-a-command",
            "text": "Command must  always  be instanciated with requestContext.getCommandAsync.",
            "title": "Using a command"
        },
        {
            "location": "/reference/commands/#creating-a-command",
            "text": "",
            "title": "Creating a command"
        },
        {
            "location": "/reference/configurations/",
            "text": "Dynamic configuration properties\n\u00b6\n\n\nConfiguration properties often require to be updated at runtime without restarting your services.\n\n\nDynamic properties offers a simple and easy way to update properties on the fly.\n\n\n\n\nThis is inspired by \nNetflix archaius\n.\n\n\n\n\nFeatures\n\u00b6\n\n\n\n\nRuntime update. Last values are cached locally.\n\n\nService can be notified when a value changes.\n\n\nProperty values are pulled from a remote server with a configuration source adapter.\n\n\nMany adapters can be used with different protocols (http, consul, file...)\n\n\nProperties can be chained, providing a value from a hierachical chain of values.\n\n\nProperties can be encrypted and decrypted locally inside a service.\n\n\nSupports docker secret\n\n\n\n\nConcepts\n\u00b6\n\n\nAll properties are managed by a \nDynamicConfiguration\n singleton object.\nThis is the unique entry point to all dynamic properties and it exposes different static methods for creating, listening and initializing properties.\n\n\nThere are two kind of properties :\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nService specific\n\n\nVisible only by a specific Service\n\n\n\n\n\n\nShared\n\n\nVisible by all services\n\n\n\n\n\n\n\n\nDeclaring a dynamic property\n\u00b6\n\n\nVulcain\n provides helpers to create dynamic properties.\n\n\nTo create a shared property:\n\n\nlet\n \nproperty1\n \n=\n \nSystem\n.\ncreateSharedConfigurationProperty\n<\nstring\n>\n(\n\"property-name\"\n,\n \n\"default value\"\n);\n\n\n\n\n\n\nTo create a service property:\n\n\nlet\n \nproperty1\n \n=\n \nSystem\n.\ncreateServiceConfigurationProperty\n<\nnumber\n>\n(\n\"property-name\"\n,\n \n0\n);\n\n\n\n\n\n\nThese helpers create a \nchained\n property. Chained property create a pipeline of dynamic properties using the first value available.\n\n\nFor example for a service property, the pipeline consists of the following property names :\n\n\n\n\nservice name + service version + property name\n\n\nservice name + property name\n\n\nproperty name (= shared property)\n\n\ndefault value\n\n\n\n\n\n\nYou can create your own chained property with \nDynamicConfiguration.asChainedProperty<string>()\n.\n\n\n\n\nDynamic property value\n\u00b6\n\n\nA property can be initialized from external source, environment variable or docker secret.\n\n\nExternal source uses polling to get values. This process is initialized before bootstrapping the application. It uses \nConfigurationSource\n object pulling data at specific time interval.\n\n\nVulcain\n provides many adapters to retrieve values like \nHttpConfigurationSource\n or \nVulcainConfigurationSource\n.\n\n\n\n\nYou can see how to create an external service providing values to use with \nVulcainConfigurationSource\n in this \narticle\n.\n\n\n\n\nPolling configurations are set in index.ts in the default vulcain template.\n\n\nimport\n \n{\n \nDynamicConfiguration\n \n}\n \nfrom\n \n\"vulcain-corejs\"\n;\n\n\n\n// Configuration initialization must run first.\n\n\nDynamicConfiguration\n\n    \n.\ninit\n(\n60\n)\n \n// Polling interval\n\n    \n.\naddVulcainSource\n()\n\n    \n.\nstartPollingAsync\n()\n\n    \n.\nthen\n(()\n \n=>\n \n{\n \n// Waiting for properties initialized\n\n        \n// Initialization OK\n\n        \n// Bootstrap application\n\n        \n// lazy loading to ensure component is loaded only after properties are initialized\n\n        \nlet\n \nstartup\n \n=\n \nrequire\n(\n\"./startup\"\n);\n\n        \nnew\n \nstartup\n.\nStartup\n().\nrunAsync\n();\n\n    \n})\n\n    \n.\ncatch\n((\ne\n:\n \nError\n)\n \n=>\n \n{\n\n        \nconsole\n.\nlog\n(\n\"Bootstrap error \"\n \n+\n \ne\n.\nstack\n \n+\n \n\". Process stopped\"\n);\n\n        \nprocess\n.\nexit\n(\n1\n);\n\n    \n});\n\n\n\n\n\n\n\n\nInfo\n\n\nApplication starts only after first polling completes successfully. This ensures services can use updated  properties when they are initialized.\n\n\n\n\nUsing external sources is optional. Dynamic property can also be initialized with :\n\n\n\n\nEnvironment variable with name transforming in uppercase and all specific character replaced with '_'. Exemple a property named \nvulcainSecretKey\n is transformed to \nVULCAIN_SECRET_KEY\n.\n\n\nDocker secret key\n.\n\n\n\n\nValues are initialized in the following order:\n\n\n\n\nExternal source\n\n\nEnvironment variable\n\n\nDocker secret file\n\n\n\n\nUsing a dynamic property\n\u00b6\n\n\nYou can get a property value through its \nvalue\n property.\n\n\nlet\n \nvalue\n \n=\n \nproperty1\n.\nvalue\n;\n\n\n\n\n\n\nYou can subscribe to a specific property value change with \nproperty1.propertyChanged.subscribe( fn )\n.\n\n\n\n\nInfo\n\n\nDynamic property can not be updated from a service, you can only override the local default value, no update\nwill be sent to sources.\n\n\n\n\nProviding value with environment variable\n\u00b6\n\n\nA default value can be provided by an environnement variable respecting the SCREAMING SNAKE CASE pattern:\n\n\n\n\nSplit property name into words using the camel case rule.\n\n\nUse underscore to separate words\n\n\nUse only uppercase\n\n\n\n\nE.g. variableName -> VARIABLE_NAME\n\n\nProviding values with configuration source\n\u00b6\n\n\nBy default, service template uses a vulcain configuration source only valid within vulcain environment.\nThis is defined in the ``\u00ecndex.ts``` project file. You can replace the default vulcain configuration source by another one.\n\n\nDynamicConfiguration\n\n    \n.\ninit\n(\n60\n)\n \n// Polling interval\n\n    \n.\naddFileSource\n(\n'\nconfig\n.\njson\n'\n)\n   \n// Read from a configuration file (once)\n\n    \n.\naddSource\n(\n \nnew\n \nHttpConfigurationSource\n(\n'\nhttp\n:\n//my-config-server'))\n\n    \n.\nstartPollingAsync\n()\n\n    \n.\nthen\n(()\n \n=>\n \n{\n \n// Waiting for properties initialized\n\n        \n// Initialization OK\n\n        \nlet\n \nstartup\n \n=\n \nrequire\n(\n\"./startup\"\n);\n \n// lazy loading\n\n        \nnew\n \nstartup\n.\nStartup\n().\nrunAsync\n();\n\n    \n})\n\n    \n.\ncatch\n((\ne\n:\n \nError\n)\n \n=>\n \n{\n\n        \nconsole\n.\nlog\n(\n\"Bootstrap error \"\n \n+\n \ne\n.\nstack\n \n+\n \n\". Process stopped\"\n);\n\n        \nprocess\n.\nexit\n(\n1\n);\n\n    \n});\n\n\n\n\n\n\n\n\nInfo\n\n\nSources can be multiple.\n\n\nYou can also create your own custom \nHttpConfigurationSource\n reading properties from a specific url.",
            "title": "Configurations"
        },
        {
            "location": "/reference/configurations/#dynamic-configuration-properties",
            "text": "Configuration properties often require to be updated at runtime without restarting your services.  Dynamic properties offers a simple and easy way to update properties on the fly.   This is inspired by  Netflix archaius .",
            "title": "Dynamic configuration properties"
        },
        {
            "location": "/reference/configurations/#features",
            "text": "Runtime update. Last values are cached locally.  Service can be notified when a value changes.  Property values are pulled from a remote server with a configuration source adapter.  Many adapters can be used with different protocols (http, consul, file...)  Properties can be chained, providing a value from a hierachical chain of values.  Properties can be encrypted and decrypted locally inside a service.  Supports docker secret",
            "title": "Features"
        },
        {
            "location": "/reference/configurations/#concepts",
            "text": "All properties are managed by a  DynamicConfiguration  singleton object.\nThis is the unique entry point to all dynamic properties and it exposes different static methods for creating, listening and initializing properties.  There are two kind of properties :     Type  Description      Service specific  Visible only by a specific Service    Shared  Visible by all services",
            "title": "Concepts"
        },
        {
            "location": "/reference/configurations/#declaring-a-dynamic-property",
            "text": "Vulcain  provides helpers to create dynamic properties.  To create a shared property:  let   property1   =   System . createSharedConfigurationProperty < string > ( \"property-name\" ,   \"default value\" );   To create a service property:  let   property1   =   System . createServiceConfigurationProperty < number > ( \"property-name\" ,   0 );   These helpers create a  chained  property. Chained property create a pipeline of dynamic properties using the first value available.  For example for a service property, the pipeline consists of the following property names :   service name + service version + property name  service name + property name  property name (= shared property)  default value    You can create your own chained property with  DynamicConfiguration.asChainedProperty<string>() .",
            "title": "Declaring a dynamic property"
        },
        {
            "location": "/reference/configurations/#dynamic-property-value",
            "text": "A property can be initialized from external source, environment variable or docker secret.  External source uses polling to get values. This process is initialized before bootstrapping the application. It uses  ConfigurationSource  object pulling data at specific time interval.  Vulcain  provides many adapters to retrieve values like  HttpConfigurationSource  or  VulcainConfigurationSource .   You can see how to create an external service providing values to use with  VulcainConfigurationSource  in this  article .   Polling configurations are set in index.ts in the default vulcain template.  import   {   DynamicConfiguration   }   from   \"vulcain-corejs\" ;  // Configuration initialization must run first.  DynamicConfiguration \n     . init ( 60 )   // Polling interval \n     . addVulcainSource () \n     . startPollingAsync () \n     . then (()   =>   {   // Waiting for properties initialized \n         // Initialization OK \n         // Bootstrap application \n         // lazy loading to ensure component is loaded only after properties are initialized \n         let   startup   =   require ( \"./startup\" ); \n         new   startup . Startup (). runAsync (); \n     }) \n     . catch (( e :   Error )   =>   { \n         console . log ( \"Bootstrap error \"   +   e . stack   +   \". Process stopped\" ); \n         process . exit ( 1 ); \n     });    Info  Application starts only after first polling completes successfully. This ensures services can use updated  properties when they are initialized.   Using external sources is optional. Dynamic property can also be initialized with :   Environment variable with name transforming in uppercase and all specific character replaced with '_'. Exemple a property named  vulcainSecretKey  is transformed to  VULCAIN_SECRET_KEY .  Docker secret key .   Values are initialized in the following order:   External source  Environment variable  Docker secret file",
            "title": "Dynamic property value"
        },
        {
            "location": "/reference/configurations/#using-a-dynamic-property",
            "text": "You can get a property value through its  value  property.  let   value   =   property1 . value ;   You can subscribe to a specific property value change with  property1.propertyChanged.subscribe( fn ) .   Info  Dynamic property can not be updated from a service, you can only override the local default value, no update\nwill be sent to sources.",
            "title": "Using a dynamic property"
        },
        {
            "location": "/reference/configurations/#providing-value-with-environment-variable",
            "text": "A default value can be provided by an environnement variable respecting the SCREAMING SNAKE CASE pattern:   Split property name into words using the camel case rule.  Use underscore to separate words  Use only uppercase   E.g. variableName -> VARIABLE_NAME",
            "title": "Providing value with environment variable"
        },
        {
            "location": "/reference/configurations/#providing-values-with-configuration-source",
            "text": "By default, service template uses a vulcain configuration source only valid within vulcain environment.\nThis is defined in the ``\u00ecndex.ts``` project file. You can replace the default vulcain configuration source by another one.  DynamicConfiguration \n     . init ( 60 )   // Polling interval \n     . addFileSource ( ' config . json ' )     // Read from a configuration file (once) \n     . addSource (   new   HttpConfigurationSource ( ' http : //my-config-server')) \n     . startPollingAsync () \n     . then (()   =>   {   // Waiting for properties initialized \n         // Initialization OK \n         let   startup   =   require ( \"./startup\" );   // lazy loading \n         new   startup . Startup (). runAsync (); \n     }) \n     . catch (( e :   Error )   =>   { \n         console . log ( \"Bootstrap error \"   +   e . stack   +   \". Process stopped\" ); \n         process . exit ( 1 ); \n     });    Info  Sources can be multiple.  You can also create your own custom  HttpConfigurationSource  reading properties from a specific url.",
            "title": "Providing values with configuration source"
        },
        {
            "location": "/reference/metrics/",
            "text": "Metrics and logging\n\u00b6\n\n\nVulcain\n generates many metrics and logging information formatted to be used directly with well-know tools.\n\n\nLogging\n\u00b6\n\n\n\n\nLog are json formated and are emited directly to the console to levearage docker logging plug-in.\n\n\nEvery log contains a correlationId propagated along vulcain service requests.\n\n\n\n\nYou can emit log with the \nRequestContext\n log property available in every scoped component (handler or command) with the \nrequestContext\nproperty. Another way to log information is to directly use the static \nSystem.log\n property.\n\n\nUsing fluentd with vulcain\n\u00b6\n\n\nHere a simple fluentd configuration to send all logs to an elasticsearch database.\n\n\n<source>\n\n  @type  forward\n\n</source>\n\n\n\n<filter\n \nvulcain.**\n>\n\n  @type parser\n  format json\n  key_name log\n  reserve_data false\n\n</filter>\n\n\n\n<match\n \nvulcain.**\n>\n\n  @type elasticsearch\n  host \"#{ENV['ELASTIC_URL']}\"\n  port \"#{ENV['ELASTIC_PORT']}\"\n  logstash_format\n  logstash_prefix \"logs-#{ENV['VULCAIN_ENV']}\"\n  flush_interval 15s\n\n</match>\n\n\n\n\n\n\n\n\nTo be used with the fluentd docker log driver.\n\n\n\n\nMetrics\n\u00b6\n\n\nVulcain\n emit metrics for every request and internal command. It provides natively a \nprometheus\nand a \nstatsd\n exporter.\n\n\nPrometheus\n is the default metrics process. It is enabled if statsd is not.\n\n\nPrometheus metrics\n\u00b6\n\n\nPrometheus metrics are available with the \n/metrics\n endpoint.\n\n\nStatsd metrics\n\u00b6\n\n\nTo activate statsd metrics, just define an environment variable \nSTATSD_AGENT\n set with the stasd agent address.\n\n\nHere a sample configuration file to use with \ntelegraf\n\n\n[\nglobal_tags\n]\n\n\n\n[\nagent\n]\n\n  \ninterval\n \n=\n \n\"10s\"\n\n  \nround_interval\n \n=\n \ntrue\n\n  \nmetric_batch_size\n \n=\n \n1000\n\n  \nmetric_buffer_limit\n \n=\n \n10000\n\n  \ncollection_jitter\n \n=\n \n\"0s\"\n\n  \nflush_interval\n \n=\n \n\"10s\"\n\n  \nflush_jitter\n \n=\n \n\"0s\"\n\n  \ndebug\n \n=\n \nfalse\n\n  \nquiet\n \n=\n \nfalse\n\n  \nhostname\n \n=\n \n\"\"\n\n  \nomit_hostname\n \n=\n \nfalse\n\n\n\n[[\noutputs\n.\ninfluxdb\n]]\n\n  \nurls\n \n=\n \n[\n$INFLUXDB_SERVERS\n]\n\n  \ndatabase\n \n=\n \n\"$ENV\"\n\n  \nprecision\n \n=\n \n\"s\"\n\n  \nretention_policy\n \n=\n \n\"default\"\n\n  \nwrite_consistency\n \n=\n \n\"any\"\n\n  \ntimeout\n \n=\n \n\"5s\"\n\n  \nusername\n \n=\n \n\"$INFLUXDB_USER\"\n\n  \npassword\n \n=\n \n\"$INFLUXDB_PASSWORD\"\n\n\n\n#\n \nRead\n \nmetrics\n \nabout\n \ncpu\n \nusage\n\n\n[[\ninputs\n.\ncpu\n]]\n\n  \npercpu\n \n=\n \nfalse\n\n  \ntotalcpu\n \n=\n \ntrue\n\n  \nfielddrop\n \n=\n \n[\n\"time_*\"\n]\n\n\n\n#\n \nRead\n \nmetrics\n \nabout\n \ndisk\n \nusage\n \nby\n \nmount\n \npoint\n\n\n#\n[[\ninputs\n.\ndisk\n]]\n\n  \n#\n \nmount_points\n \n=\n \n[\n\"/\"\n]\n\n  \n#\nignore_fs\n \n=\n \n[\n\"tmpfs\"\n,\n \n\"devtmpfs\"\n]\n\n\n\n#\n \nRead\n \nmetrics\n \nabout\n \ndisk\n \nIO\n \nby\n \ndevice\n\n\n#\n[[\ninputs\n.\ndiskio\n]]\n\n\n\n#\n \nGet\n \nkernel\n \nstatistics\n \nfrom\n \n/\nproc\n/\nstat\n\n\n#\n[[\ninputs\n.\nkernel\n]]\n\n\n\n#\n \nRead\n \nmetrics\n \nabout\n \nmemory\n \nusage\n\n\n[[\ninputs\n.\nmem\n]]\n\n\n\n#\n \nGet\n \nthe\n \nnumber\n \nof\n \nprocesses\n \nand\n \ngroup\n \nthem\n \nby\n \nstatus\n\n\n#\n[[\ninputs\n.\nprocesses\n]]\n\n\n\n#\n \nRead\n \nmetrics\n \nabout\n \nswap\n \nmemory\n \nusage\n\n\n#\n[[\ninputs\n.\nswap\n]]\n\n\n\n#\n \nRead\n \nmetrics\n \nabout\n \nsystem\n \nload\n \n&\n \nuptime\n\n\n#\n[[\ninputs\n.\nsystem\n]]\n\n\n\n#\n \n#\n \nRead\n \nmetrics\n \nabout\n \ndocker\n \ncontainers\n\n\n[[\ninputs\n.\ndocker\n]]\n\n   \nendpoint\n \n=\n \n\"unix:///var/run/docker.sock\"\n\n\n#\n   \ncontainer_names\n \n=\n \n[]\n\n\n\n#\n \nStatsd\n \nserver\n\n\n[[\ninputs\n.\nstatsd\n]]\n\n  \n##\n \nAddress\n \nand\n \nport\n \nto\n \nhost\n \nUDP\n \nlistener\n \non\n\n   \nservice_address\n \n=\n \n\"0.0.0.0:8125\"\n\n  \n##\n \nDelete\n \ngauges\n \nevery\n \ninterval\n \n(\ndefault\n=\nfalse\n)\n\n   \ndelete_gauges\n \n=\n \nfalse\n\n  \n##\n \nDelete\n \ncounters\n \nevery\n \ninterval\n \n(\ndefault\n=\nfalse\n)\n\n   \ndelete_counters\n \n=\n \ntrue\n\n  \n##\n \nDelete\n \nsets\n \nevery\n \ninterval\n \n(\ndefault\n=\nfalse\n)\n\n   \ndelete_sets\n \n=\n \nfalse\n\n  \n##\n \nDelete\n \ntimings\n \n&\n \nhistograms\n \nevery\n \ninterval\n \n(\ndefault\n=\ntrue\n)\n\n   \ndelete_timings\n \n=\n \ntrue\n\n  \n##\n \nPercentiles\n \nto\n \ncalculate\n \nfor\n \ntiming\n \n&\n \nhistogram\n \nstats\n\n   \npercentiles\n \n=\n \n[\n90\n]\n\n\n  \n##\n \nseparator\n \nto\n \nuse\n \nbetween\n \nelements\n \nof\n \na\n \nstatsd\n \nmetric\n\n   \nmetric_separator\n \n=\n \n\"_\"\n\n\n  \n##\n \nParses\n \ntags\n \nin\n \nthe\n \ndatadog\n \nstatsd\n \nformat\n\n  \n##\n \nhttp\n:\n//docs.datadoghq.com/guides/dogstatsd/\n\n  \nparse_data_dog_tags\n \n=\n \nfalse\n\n\n\n#\n \nNumber\n \nof\n \nUDP\n \nmessages\n \nallowed\n \nto\n \nqueue\n \nup\n,\n \nonce\n \nfilled\n,\n\n\n#\n \nthe\n \nstatsd\n \nserver\n \nwill\n \nstart\n \ndropping\n \npackets\n\n   \nallowed_pending_messages\n \n=\n \n10000\n\n\n#\n\n  \n##\n \nNumber\n \nof\n \ntiming\n/\nhistogram\n \nvalues\n \nto\n \ntrack\n \nper\n-\nmeasurement\n \nin\n \nthe\n\n  \n##\n \ncalculation\n \nof\n \npercentiles\n.\n \nRaising\n \nthis\n \nlimit\n \nincreases\n \nthe\n \naccuracy\n\n  \n##\n \nof\n \npercentiles\n \nbut\n \nalso\n \nincreases\n \nthe\n \nmemory\n \nusage\n \nand\n \ncpu\n \ntime\n.\n\n  \npercentile_limit\n \n=\n \n1000\n\n\n\n\n\n\nZipkin instrumentation\n\u00b6\n\n\nZipkin\n is a distributed tracing system and it is fully integrated within \nvulcain\n.\n\n\nYou can enable it by providing a \ndynamic property\n (zipkinAgent) or an environment variable (ZIPKIN_AGENT) defining the zipkin agent address.\n\n\nexport\n \nZIPKIN_AGENT\n=\nhttp://host:9411\n\n\n\n\n\nGo to this \npage\n to see how to run zipkin agent and dashboard.",
            "title": "Monitoring"
        },
        {
            "location": "/reference/metrics/#metrics-and-logging",
            "text": "Vulcain  generates many metrics and logging information formatted to be used directly with well-know tools.",
            "title": "Metrics and logging"
        },
        {
            "location": "/reference/metrics/#logging",
            "text": "Log are json formated and are emited directly to the console to levearage docker logging plug-in.  Every log contains a correlationId propagated along vulcain service requests.   You can emit log with the  RequestContext  log property available in every scoped component (handler or command) with the  requestContext property. Another way to log information is to directly use the static  System.log  property.",
            "title": "Logging"
        },
        {
            "location": "/reference/metrics/#using-fluentd-with-vulcain",
            "text": "Here a simple fluentd configuration to send all logs to an elasticsearch database.  <source> \n  @type  forward </source>  <filter   vulcain.** > \n  @type parser\n  format json\n  key_name log\n  reserve_data false </filter>  <match   vulcain.** > \n  @type elasticsearch\n  host \"#{ENV['ELASTIC_URL']}\"\n  port \"#{ENV['ELASTIC_PORT']}\"\n  logstash_format\n  logstash_prefix \"logs-#{ENV['VULCAIN_ENV']}\"\n  flush_interval 15s </match>    To be used with the fluentd docker log driver.",
            "title": "Using fluentd with vulcain"
        },
        {
            "location": "/reference/metrics/#metrics",
            "text": "Vulcain  emit metrics for every request and internal command. It provides natively a  prometheus and a  statsd  exporter.  Prometheus  is the default metrics process. It is enabled if statsd is not.",
            "title": "Metrics"
        },
        {
            "location": "/reference/metrics/#prometheus-metrics",
            "text": "Prometheus metrics are available with the  /metrics  endpoint.",
            "title": "Prometheus metrics"
        },
        {
            "location": "/reference/metrics/#statsd-metrics",
            "text": "To activate statsd metrics, just define an environment variable  STATSD_AGENT  set with the stasd agent address.  Here a sample configuration file to use with  telegraf  [ global_tags ]  [ agent ] \n   interval   =   \"10s\" \n   round_interval   =   true \n   metric_batch_size   =   1000 \n   metric_buffer_limit   =   10000 \n   collection_jitter   =   \"0s\" \n   flush_interval   =   \"10s\" \n   flush_jitter   =   \"0s\" \n   debug   =   false \n   quiet   =   false \n   hostname   =   \"\" \n   omit_hostname   =   false  [[ outputs . influxdb ]] \n   urls   =   [ $INFLUXDB_SERVERS ] \n   database   =   \"$ENV\" \n   precision   =   \"s\" \n   retention_policy   =   \"default\" \n   write_consistency   =   \"any\" \n   timeout   =   \"5s\" \n   username   =   \"$INFLUXDB_USER\" \n   password   =   \"$INFLUXDB_PASSWORD\"  #   Read   metrics   about   cpu   usage  [[ inputs . cpu ]] \n   percpu   =   false \n   totalcpu   =   true \n   fielddrop   =   [ \"time_*\" ]  #   Read   metrics   about   disk   usage   by   mount   point  # [[ inputs . disk ]] \n   #   mount_points   =   [ \"/\" ] \n   # ignore_fs   =   [ \"tmpfs\" ,   \"devtmpfs\" ]  #   Read   metrics   about   disk   IO   by   device  # [[ inputs . diskio ]]  #   Get   kernel   statistics   from   / proc / stat  # [[ inputs . kernel ]]  #   Read   metrics   about   memory   usage  [[ inputs . mem ]]  #   Get   the   number   of   processes   and   group   them   by   status  # [[ inputs . processes ]]  #   Read   metrics   about   swap   memory   usage  # [[ inputs . swap ]]  #   Read   metrics   about   system   load   &   uptime  # [[ inputs . system ]]  #   #   Read   metrics   about   docker   containers  [[ inputs . docker ]] \n    endpoint   =   \"unix:///var/run/docker.sock\"  #     container_names   =   []  #   Statsd   server  [[ inputs . statsd ]] \n   ##   Address   and   port   to   host   UDP   listener   on \n    service_address   =   \"0.0.0.0:8125\" \n   ##   Delete   gauges   every   interval   ( default = false ) \n    delete_gauges   =   false \n   ##   Delete   counters   every   interval   ( default = false ) \n    delete_counters   =   true \n   ##   Delete   sets   every   interval   ( default = false ) \n    delete_sets   =   false \n   ##   Delete   timings   &   histograms   every   interval   ( default = true ) \n    delete_timings   =   true \n   ##   Percentiles   to   calculate   for   timing   &   histogram   stats \n    percentiles   =   [ 90 ] \n\n   ##   separator   to   use   between   elements   of   a   statsd   metric \n    metric_separator   =   \"_\" \n\n   ##   Parses   tags   in   the   datadog   statsd   format \n   ##   http : //docs.datadoghq.com/guides/dogstatsd/ \n   parse_data_dog_tags   =   false  #   Number   of   UDP   messages   allowed   to   queue   up ,   once   filled ,  #   the   statsd   server   will   start   dropping   packets \n    allowed_pending_messages   =   10000  # \n   ##   Number   of   timing / histogram   values   to   track   per - measurement   in   the \n   ##   calculation   of   percentiles .   Raising   this   limit   increases   the   accuracy \n   ##   of   percentiles   but   also   increases   the   memory   usage   and   cpu   time . \n   percentile_limit   =   1000",
            "title": "Statsd metrics"
        },
        {
            "location": "/reference/metrics/#zipkin-instrumentation",
            "text": "Zipkin  is a distributed tracing system and it is fully integrated within  vulcain .  You can enable it by providing a  dynamic property  (zipkinAgent) or an environment variable (ZIPKIN_AGENT) defining the zipkin agent address.  export   ZIPKIN_AGENT = http://host:9411  Go to this  page  to see how to run zipkin agent and dashboard.",
            "title": "Zipkin instrumentation"
        },
        {
            "location": "/reference/security/",
            "text": "Authorization\n\u00b6\n\n\nVulcain\n uses scopes to manage authorization.\n\n\nEvery handler must have a scope defined in its annotation. A scope definition can be any of the following kind:\n\n\n\n\n\n\n\n\nscope\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\n?\n\n\nAnonymous user (not authentified)\n\n\n\n\n\n\n*\n\n\nAny authentified user\n\n\n\n\n\n\n'name'\n\n\nA scope name\n\n\n\n\n\n\n\n\n\n\nVulcain\n supports basic, bearer token and api key authentification. Go to \nthis article\n to see how to create an authentication service providing bearer or apikey token to use with \nvulcain\n.\n\n\n\n\nA scope defined in \nActionHandler\n or \nQueryHandler\n is a default scope for all handler methods but can be overriden in each and every method.\n\n\nYou can define many scopes for a same handler by seperating them with a comma.\n\n\n\n\nInfo\n\n\nSecurity context propagation\n\n\nBearer token is used to propagate along all vulcain service requests the security context. A bearer token is automatically created for every request with basic or api key authentication.\n\n\nEach bearer token encapsulates user properties (name, displayName, scopes and tenant) available from the \nrequestContext.user\n property.\n\n\n\n\nScope definition format\n\u00b6\n\n\nScope name is composed by the domain service name and the defined name.\n\n\nFor example, the following scope definition in an \nIdentities\n \ndomain name\n :\n\n\n@ActionHandler\n({\nscope\n:\n'\nUser\n:\ncreate\n'\n})\n\n\n\n\n\n\nwill be named 'identities:user:create'.\n\n\n\n\nScope is case insensitive.\n\n\n\n\nA scope defines a hierarchy with a root level (e.g. identities) and sub levels separed by colon.\n\n\nScope rule\n\u00b6\n\n\nWhen you create a new user, you assign it a list of scope rules. These rules are processed to check if a user is authorized to use an handler.\n\n\nA rule is compared to a scope and can contain a '\n' operator which means all sub levels. For example, the rule 'identities:\n' matches all scopes beginning with 'identities:'.\n\n\n'\n' is only valid at a level position e.g. 'identi\n:' is not valid.\n\n\n\n\nThe rule '*' means \nadministrator\n\n\n\n\n\n\nWarning\n\n\nIn development mode (local development) scope are ignored.\n\n\n\n\nScope description\n\u00b6\n\n\nEvery service exposes its description like handler definition, dependencies and its scope. It's a good practice to provide a description for all scopes used in a service.\n\n\nYou can do that in the \nstartup\n class.\n\n\ndefineScopes\n(\nscopes\n)\n \n{\n\n    \nscopes\n.\ndefineScope\n(\n\"user:create\"\n,\n \n\"Create a new user\"\n);\n\n\n}",
            "title": "Security"
        },
        {
            "location": "/reference/security/#authorization",
            "text": "Vulcain  uses scopes to manage authorization.  Every handler must have a scope defined in its annotation. A scope definition can be any of the following kind:     scope  description      ?  Anonymous user (not authentified)    *  Any authentified user    'name'  A scope name      Vulcain  supports basic, bearer token and api key authentification. Go to  this article  to see how to create an authentication service providing bearer or apikey token to use with  vulcain .   A scope defined in  ActionHandler  or  QueryHandler  is a default scope for all handler methods but can be overriden in each and every method.  You can define many scopes for a same handler by seperating them with a comma.   Info  Security context propagation  Bearer token is used to propagate along all vulcain service requests the security context. A bearer token is automatically created for every request with basic or api key authentication.  Each bearer token encapsulates user properties (name, displayName, scopes and tenant) available from the  requestContext.user  property.",
            "title": "Authorization"
        },
        {
            "location": "/reference/security/#scope-definition-format",
            "text": "Scope name is composed by the domain service name and the defined name.  For example, the following scope definition in an  Identities   domain name  :  @ActionHandler ({ scope : ' User : create ' })   will be named 'identities:user:create'.   Scope is case insensitive.   A scope defines a hierarchy with a root level (e.g. identities) and sub levels separed by colon.",
            "title": "Scope definition format"
        },
        {
            "location": "/reference/security/#scope-rule",
            "text": "When you create a new user, you assign it a list of scope rules. These rules are processed to check if a user is authorized to use an handler.  A rule is compared to a scope and can contain a ' ' operator which means all sub levels. For example, the rule 'identities: ' matches all scopes beginning with 'identities:'.  ' ' is only valid at a level position e.g. 'identi :' is not valid.   The rule '*' means  administrator    Warning  In development mode (local development) scope are ignored.",
            "title": "Scope rule"
        },
        {
            "location": "/reference/security/#scope-description",
            "text": "Every service exposes its description like handler definition, dependencies and its scope. It's a good practice to provide a description for all scopes used in a service.  You can do that in the  startup  class.  defineScopes ( scopes )   { \n     scopes . defineScope ( \"user:create\" ,   \"Create a new user\" );  }",
            "title": "Scope description"
        },
        {
            "location": "/reference/testing/",
            "text": "Testing microservice\n\u00b6\n\n\nA big challenge with microservice is testing integration with other services and dependencies.\n\n\nVulcain\n provides many features to help testing in this context.\n\n\nMock functionality\n\u00b6\n\n\nVulcain\n can create \nmock\n by registering a request and saving it in a \nsession\n. When a \nsession\n is registered, you can replay it many times. You can create many \nsession\n given them a different name.\n\n\nRegistering a mock\n\u00b6\n\n\nTo register a \nmock session\n, you must call a microservice with the specific header \nx-vulcain-register-mock-session\n specifying the session name. \n\n\nx-vulcain-register-mock-session: mocksessionname\n\n\n\n\n\nWhen a microservice endpoint is called with this header, it will save the calling context (action and parameters) as well as its result.\n\n\n\n\nBy default, a mock session is saved in the '.vulcain' file but you can create your own session manager by overriding the \nMockManager\n default service.\n\n\n\n\nA mock is replayed if the call context (action and parameters) is strictly identical to the registered mock context. If you want to be less restrictive, you can remove some arguments to the saved session, the filter will operate only on existing arguments.\n\n\nBy default, the mock session header is propagated along requests registering mock for all 'sub' services. If you want to limit the scope of the registering session to some specific services, you can include in the mock header a service name filter (as a regular expression).\n\n\nExample to register a mock session for all services with a name beginning with customer:\n\n\nx-vulcain-register-mock-session: mocksessionname:^customer\n\n\n\n\n\n\n\nInfo\n\n\nSince mock session are saved in the .vulcain file which will be included in the docker container, you can save mock session locally before deploying your microservice.\nIn all cases, mock feature is disabled in production mode.\n\n\n\n\nUsing a mock\n\u00b6\n\n\nYou can use a mock session by using the \nx-vulcain-use-mock-session\n header specifying the session name to use. If no matching session exists, this header is ignored and the microservice runs normally.\n\n\n\n\nThis header supports filtering mechanism.\n\n\n\n\nUsing dynamic properties\n\u00b6\n\n\nSetting request header is not so easy in particular if you don't want to modify your code. So you can enable mock session with \ndynamic properties\n. Since dynamic properties can be initialized with environment variables it's easy to use it.\n\n\n\n\n\n\n\n\nProperty name\n\n\nAlternate environment variable\n\n\n\n\n\n\n\n\n\n\nvulcainUseMockSession\n\n\nVULCAIN_USE_MOCK_SESSION\n\n\n\n\n\n\nvulcainRegisterMockSession\n\n\nVULCAIN_REGISTER_MOCK_SESSION\n\n\n\n\n\n\n\n\n\n\nService dynamic property is valid only for a specific service and don't need a filter. It is not propagated along requests.\n\n\n\n\nLocal development\n\u00b6\n\n\nSometimes you want to mock non (yet) existing service or an external api for testing your service locally. You can simulate calls using local mock defined in the .vulcain file.\n\n\nYou could define mocks for service (requesting with a \nAbstractServiceCommand\n) or for external api (requesting with a \nAbstractHttpCommand\n).\n\n\n\n\nFor database, you can use the \nMemoryProvider\n.\n\n\n\n\nService local mocking\n\u00b6\n\n\nAdd definitions in the '.vulcain' file with the following format:\n\n\nDefining an external api mock\n\u00b6\n\n\n{\n\n   \n\"mocks\"\n:\n \n{\n\n        \n\"http\"\n:\n \n{\n\n            \n\"<url>\"\n:\n \n{\n\n                \n\"<http verb>\"\n:\n \n{\n \n// optional\n\n                    \n\"output\"\n:\n \n{\n<\nresult\n \nbody\n>\n},\n\n                    \n\"latency\"\n:\n \n<\nms\n>\n \n// optional\n\n                \n}\n\n            \n}\n\n        \n}\n\n    \n}\n\n\n}\n\n\n\n\n\n\nThe first url equality wins.\n\n\nDefining a service mock\n\u00b6\n\n\n{\n\n   \n\"mocks\"\n:\n \n{\n\n        \n\"services\"\n:\n \n{\n\n            \n\"<service name>\"\n:\n \n{\n\n                \n\"<service version>\"\n:\n \n{\n \n// optional\n\n                    \n\"service verb\"\n:\n \n{\n<\nservice\n \nvalue\n \nresponse\n>\n}\n\n               \n}\n\n           \n},\n\n           \n\"<service name>\"\n:\n \n{\n\n                \n\"<service version>\"\n:\n \n{\n \n// optional\n\n                    \n\"service verb\"\n:\n \n[\n\n                        \n{\n\n                            \n\"input\"\n:\n \n{\n \n<\ninput\n \nargs\n>\n},\n\n                            \n\"output\"\n:\n \n{\n<\nservice\n \nvalue\n \nresponse\n},\n\n                            \n\"latency\"\n:\n \n<\nms\n>\n  \n// optional\n\n                        \n},\n\n                        \n{\n\n                            \n\"input\"\n:\n \n{\n \n<\nother\n \ninput\n \nargs\n>\n},\n\n                            \n\"output\"\n:\n \n{\n<\nservice\n \nvalue\n \nresponse\n},\n\n                            \n\"latency\"\n:\n \n<\nms\n>\n  \n// optional\n\n                        \n}\n\n                    \n]\n\n                \n}\n\n           \n}\n\n       \n}\n\n   \n}\n\n\n}\n\n\n\n\n\n\nThe first input (or null) matching wins.",
            "title": "Testing"
        },
        {
            "location": "/reference/testing/#testing-microservice",
            "text": "A big challenge with microservice is testing integration with other services and dependencies.  Vulcain  provides many features to help testing in this context.",
            "title": "Testing microservice"
        },
        {
            "location": "/reference/testing/#mock-functionality",
            "text": "Vulcain  can create  mock  by registering a request and saving it in a  session . When a  session  is registered, you can replay it many times. You can create many  session  given them a different name.",
            "title": "Mock functionality"
        },
        {
            "location": "/reference/testing/#registering-a-mock",
            "text": "To register a  mock session , you must call a microservice with the specific header  x-vulcain-register-mock-session  specifying the session name.   x-vulcain-register-mock-session: mocksessionname  When a microservice endpoint is called with this header, it will save the calling context (action and parameters) as well as its result.   By default, a mock session is saved in the '.vulcain' file but you can create your own session manager by overriding the  MockManager  default service.   A mock is replayed if the call context (action and parameters) is strictly identical to the registered mock context. If you want to be less restrictive, you can remove some arguments to the saved session, the filter will operate only on existing arguments.  By default, the mock session header is propagated along requests registering mock for all 'sub' services. If you want to limit the scope of the registering session to some specific services, you can include in the mock header a service name filter (as a regular expression).  Example to register a mock session for all services with a name beginning with customer:  x-vulcain-register-mock-session: mocksessionname:^customer   Info  Since mock session are saved in the .vulcain file which will be included in the docker container, you can save mock session locally before deploying your microservice.\nIn all cases, mock feature is disabled in production mode.",
            "title": "Registering a mock"
        },
        {
            "location": "/reference/testing/#using-a-mock",
            "text": "You can use a mock session by using the  x-vulcain-use-mock-session  header specifying the session name to use. If no matching session exists, this header is ignored and the microservice runs normally.   This header supports filtering mechanism.",
            "title": "Using a mock"
        },
        {
            "location": "/reference/testing/#using-dynamic-properties",
            "text": "Setting request header is not so easy in particular if you don't want to modify your code. So you can enable mock session with  dynamic properties . Since dynamic properties can be initialized with environment variables it's easy to use it.     Property name  Alternate environment variable      vulcainUseMockSession  VULCAIN_USE_MOCK_SESSION    vulcainRegisterMockSession  VULCAIN_REGISTER_MOCK_SESSION      Service dynamic property is valid only for a specific service and don't need a filter. It is not propagated along requests.",
            "title": "Using dynamic properties"
        },
        {
            "location": "/reference/testing/#local-development",
            "text": "Sometimes you want to mock non (yet) existing service or an external api for testing your service locally. You can simulate calls using local mock defined in the .vulcain file.  You could define mocks for service (requesting with a  AbstractServiceCommand ) or for external api (requesting with a  AbstractHttpCommand ).   For database, you can use the  MemoryProvider .",
            "title": "Local development"
        },
        {
            "location": "/reference/testing/#service-local-mocking",
            "text": "Add definitions in the '.vulcain' file with the following format:",
            "title": "Service local mocking"
        },
        {
            "location": "/reference/testing/#defining-an-external-api-mock",
            "text": "{ \n    \"mocks\" :   { \n         \"http\" :   { \n             \"<url>\" :   { \n                 \"<http verb>\" :   {   // optional \n                     \"output\" :   { < result   body > }, \n                     \"latency\" :   < ms >   // optional \n                 } \n             } \n         } \n     }  }   The first url equality wins.",
            "title": "Defining an external api mock"
        },
        {
            "location": "/reference/testing/#defining-a-service-mock",
            "text": "{ \n    \"mocks\" :   { \n         \"services\" :   { \n             \"<service name>\" :   { \n                 \"<service version>\" :   {   // optional \n                     \"service verb\" :   { < service   value   response > } \n                } \n            }, \n            \"<service name>\" :   { \n                 \"<service version>\" :   {   // optional \n                     \"service verb\" :   [ \n                         { \n                             \"input\" :   {   < input   args > }, \n                             \"output\" :   { < service   value   response }, \n                             \"latency\" :   < ms >    // optional \n                         }, \n                         { \n                             \"input\" :   {   < other   input   args > }, \n                             \"output\" :   { < service   value   response }, \n                             \"latency\" :   < ms >    // optional \n                         } \n                     ] \n                 } \n            } \n        } \n    }  }   The first input (or null) matching wins.",
            "title": "Defining a service mock"
        },
        {
            "location": "/articles/",
            "text": "How-to articles\n\u00b6\n\n\n\n\nCreating an user service\n\n\nCreating a dynamic properties server\n\n\nSetup Vulcain Demo on Azure",
            "title": "How to index"
        },
        {
            "location": "/articles/#how-to-articles",
            "text": "Creating an user service  Creating a dynamic properties server  Setup Vulcain Demo on Azure",
            "title": "How-to articles"
        },
        {
            "location": "/articles/users/",
            "text": "Create a user service\n\u00b6\n\n\nVulcain\n uses \nscopes\n to manage authorizations but this is only valid if your users are authentified.\n\n\nIn this article, we will create a service for managing users. It will provide the following features:\n\n\n\n\nManage users defined in a basic extensible user model\n\n\nGenerate bearer token to use with vulcain service.\n\n\nOptionaly manage api key.\n\n\n\n\nInitialize the project\n\u00b6\n\n\nLet's start from an empty vulcain project.\n\n\nvulcain new --template NodeMicroService users-service\n\n\n\n\n\nThen open the project and remove the src/sample folder.\n\n\nAdd users management feature\n\u00b6\n\n\nTo do this, we will just add an npm package with the following command:\n\n\nnpm i vulcain-users --save\n\n\n\n\n\nThis package contains all the required features.\nWe need then to declare it as services. Go to startup.ts and :\n\n\n\n\nAdd import statement\n\n\n\n\nimport\n \n*\n \nas\n \nusers\n \nfrom\n \n\"vulcain-users\"\n;\n\n\n\n\n\n\n\n\nDeclare services by adding the following line in \ninitializeDefaultServices\n\n\n\n\nusers\n.\nuseUserManagement\n(\ncontainer\n);\n\n\n\n\n\n\nThat's it. You have a user and apikey service management ready to use. You can see all the handlers exposed from http://localhost:8080/api/_servicedescription.\n\n\nCreate a new user\n\u00b6\n\n\nFirst we need to create a new admin user with all authorizations by settings its scope to '*'.\n\n\ncurl -XPOST http://localhost:8080/api/user.create -u admin:admin -H \n\"Content-Type: application/json\"\n \n\\\n\n-d \n'{\"name\":\"admin\", \"password\":\"password\", \"scopes\":[\"*\"]}'\n\n\n\n\n\n\n\n\nInfo\n\n\nFor this first request, we have used admin/admin as the authentified user. This is the default user with all admin rights if \nANY\n user exists in the database.\n\n\nAs soon as you create an user, this admin/admin authentication is no longer valid (but you can create a new one with the same name).\n\n\n\n\nWe can now test authentication and authorization with the following requests:\n\n\ncurl http://localhost:8080/api/user.all -I\ncurl http://localhost:8080/api/user.all -I -u admin:admin\ncurl http://localhost:8080/api/user.all -I -u admin:password\ncurl http://localhost:8080/api/user.all -u admin:password\n\n\n\n\n\n\n\nNote how admin:admin is no longer valid.\n\n\n\n\nCreate a bearer token\n\u00b6\n\n\nA bearer token is used to authentify user. It is generaly created when a user logs into a web site.\n\n\n\n\nInfo\n\n\nSecurity context propagation\n\n\nBearer token will be valid and propagated along all vulcain service requests propagating the security context. Each bearer token encapsulates user properties (name, displayName, scopes and tenant) available from the \nrequestContext.user\n property.\n\n\nYou can override a security context when you call another service by using \nimpersonation\n. Impersonation can only be done using api key by calling the \nAbstractServiceCommand.setRequestContext\n method.\n\n\n\n\ncurl http://localhost:8080/api/createToken -XPOST -u admin:password\n\n\n\n\n\nThe response must be like this:\n\n\n{\n\"tenant\"\n:\n\"vulcain\"\n,\n\"action\"\n:\n\"createToken\"\n,\n\"domain\"\n:\n\"identities\"\n,\n\"status\"\n:\n\"Success\"\n,\n\"correlationId\"\n:\n\"fd3a945dcb9146538713f9a351ec9378\"\n,\n\"value\"\n:\n{\n\"expiresIn\"\n:1200,\n\"token\"\n:\n\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXV9.eyJ2YWx1ZSI6eyJ1c2VyIjp7ImRpc3BsYXlOYW1lIjoiYWRtaW4iLCJuYW1lIjoiRtaW4iLCJ0ZW5hbnQiOiJ2dWxjYWluIn0sInNjb3BlcyI6WyIqIl19LCJpYXQiOjE0ODk2NjQxNzEsImV4cCI6MTQ4OTYTM3MX0.J8kVMGqFyQr_j0M2J4dSB0fxfyFLJgcQCuD2by1Bk\"\n,\n\"renewToken\"\n:\n\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXJ9.eyJpYXQiOjE0ODk2NjQxNsImV4cCI6MTQ4OTY2NTM3MX0.A4tuPF1En_eD53TcMApbweEYtKC-lqq2Zc0lOkavKzI\"\n}}\n\n\n\n\n\n\nYou can now use this token directly\n\n\ncurl http://localhost:8080/api/user.all -H \n'Authorization: Bearer <your token>'\n\n\n\n\n\n\nRenew a token\n\u00b6\n\n\nYou can renew a bearer token to extend its expiration time. For this you must use the renewToken provided when your first requested the token.\n\n\n\n\nObviously you need to renew a token before its expiration.\n\n\n\n\ncurl http://localhost:8080/api/renewToken -H \n'Authorization: Bearer <your bearer token>'\n -XPOST -d \n'{\"renewToken\": \"<your renew token>\"}'\n -H \n'Content-Type: application/json'\n\n\n\n\n\n\nFor more information about using token read \nthis\n\n\nHow to specify a custom secret key for production\n\u00b6\n\n\nVulcain\n uses a default secret key to create token. If you want to deploy \nvulcain\n service in production you \nMUST\n provide a new secret key.\n\n\nThis secret key must be shared by all services using bearer token. The best way to share a property is to use a \ndynamic property\n. But like all dynamic properties you can simply use an environment variable.\n\n\nThree properties can be defined:\n\n\n\n\n\n\n\n\nProperty name\n\n\nEnvironment variable\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nvulcainSecretKey\n\n\nVULCAIN_SECRET_KEY\n\n\nSecret key\n\n\n\n\n\n\nvulcainTokenIssuer\n\n\nVULCAIN_TOKEN_ISSUER\n\n\nToken issuer\n\n\n\n\n\n\nvulcainTokenExpiration\n\n\nVULCAIN_TOKEN_EXPIRATION\n\n\nToken expiration (default 20m)\n\n\n\n\n\n\n\n\n\n\nUnder the hood, \nvulcain\n uses \njsonwebtoken\n.\n\n\n\n\nCreate apikey\n\u00b6\n\n\nApikey can be created with the \napikey.create\n verb (see service description for details) and can be used like a bearer token by replacing the \nAuthorization: Bearer <token>\n by \nAuthorization: ApiKey <apikey>\n\n\nApikey has no expiration time and must be revoked with the \napikey.delete\n verb.\n\n\nSince apikey validation process needs to access apikey data, if you want to use apikey authentication in another service, you must specify how to access to the user service by adding the following line in \ninitializeDefaultServices\n.\n\n\n  \nthis\n.\nenableApiKeyAuthentication\n(\n\"users-service\"\n);\n \n// Set with the name of the users service\n\n\n\n\n\n\nExtend default user model\n\u00b6\n\n\nVulcain\n uses a default user model, you can extend or replace it in your user service by adding a new user model.\n\n\nTo extends the default user model, add this file into the src/api hierarchy.\n\n\nimport\n \n{\n \nUser\n \n}\n \nfrom\n \n\"vulcain-users\"\n;\n\n\nimport\n \n{\n \nModel\n,\n \nProperty\n \n}\n \nfrom\n \n\"vulcain-corejs\"\n;\n\n\n\n@Model\n({\n \nname\n:\n \n'\nUser\n'\n,\n \nextends\n:\n \n'\n+\nUser\n'\n \n})\n\n\nexport\n \nclass\n \nMyUser\n \nextends\n \nUser\n \n{\n\n    \n@Property\n({\ntype\n:\n \n'\nnumber\n'\n})\n\n    \nage\n:\n \nnumber\n;\n\n\n}\n\n\n\n\n\n\nThe thing to note is the \nextends\n syntax with a '+' prefix before the model to extend. This means inheriting and extending an existing model and replace it with this new one.\n\n\nTo replace an existing model with a new one, use \nextends: \"-User\"\n instead.\n\n\n\n\nBe carefull with that, you must implement all default model behaviors like password protection.",
            "title": "Users service"
        },
        {
            "location": "/articles/users/#create-a-user-service",
            "text": "Vulcain  uses  scopes  to manage authorizations but this is only valid if your users are authentified.  In this article, we will create a service for managing users. It will provide the following features:   Manage users defined in a basic extensible user model  Generate bearer token to use with vulcain service.  Optionaly manage api key.",
            "title": "Create a user service"
        },
        {
            "location": "/articles/users/#initialize-the-project",
            "text": "Let's start from an empty vulcain project.  vulcain new --template NodeMicroService users-service  Then open the project and remove the src/sample folder.",
            "title": "Initialize the project"
        },
        {
            "location": "/articles/users/#add-users-management-feature",
            "text": "To do this, we will just add an npm package with the following command:  npm i vulcain-users --save  This package contains all the required features.\nWe need then to declare it as services. Go to startup.ts and :   Add import statement   import   *   as   users   from   \"vulcain-users\" ;    Declare services by adding the following line in  initializeDefaultServices   users . useUserManagement ( container );   That's it. You have a user and apikey service management ready to use. You can see all the handlers exposed from http://localhost:8080/api/_servicedescription.",
            "title": "Add users management feature"
        },
        {
            "location": "/articles/users/#create-a-new-user",
            "text": "First we need to create a new admin user with all authorizations by settings its scope to '*'.  curl -XPOST http://localhost:8080/api/user.create -u admin:admin -H  \"Content-Type: application/json\"   \\ \n-d  '{\"name\":\"admin\", \"password\":\"password\", \"scopes\":[\"*\"]}'    Info  For this first request, we have used admin/admin as the authentified user. This is the default user with all admin rights if  ANY  user exists in the database.  As soon as you create an user, this admin/admin authentication is no longer valid (but you can create a new one with the same name).   We can now test authentication and authorization with the following requests:  curl http://localhost:8080/api/user.all -I\ncurl http://localhost:8080/api/user.all -I -u admin:admin\ncurl http://localhost:8080/api/user.all -I -u admin:password\ncurl http://localhost:8080/api/user.all -u admin:password   Note how admin:admin is no longer valid.",
            "title": "Create a new user"
        },
        {
            "location": "/articles/users/#create-a-bearer-token",
            "text": "A bearer token is used to authentify user. It is generaly created when a user logs into a web site.   Info  Security context propagation  Bearer token will be valid and propagated along all vulcain service requests propagating the security context. Each bearer token encapsulates user properties (name, displayName, scopes and tenant) available from the  requestContext.user  property.  You can override a security context when you call another service by using  impersonation . Impersonation can only be done using api key by calling the  AbstractServiceCommand.setRequestContext  method.   curl http://localhost:8080/api/createToken -XPOST -u admin:password  The response must be like this:  { \"tenant\" : \"vulcain\" , \"action\" : \"createToken\" , \"domain\" : \"identities\" , \"status\" : \"Success\" , \"correlationId\" : \"fd3a945dcb9146538713f9a351ec9378\" , \"value\" : { \"expiresIn\" :1200, \"token\" : \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXV9.eyJ2YWx1ZSI6eyJ1c2VyIjp7ImRpc3BsYXlOYW1lIjoiYWRtaW4iLCJuYW1lIjoiRtaW4iLCJ0ZW5hbnQiOiJ2dWxjYWluIn0sInNjb3BlcyI6WyIqIl19LCJpYXQiOjE0ODk2NjQxNzEsImV4cCI6MTQ4OTYTM3MX0.J8kVMGqFyQr_j0M2J4dSB0fxfyFLJgcQCuD2by1Bk\" , \"renewToken\" : \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXJ9.eyJpYXQiOjE0ODk2NjQxNsImV4cCI6MTQ4OTY2NTM3MX0.A4tuPF1En_eD53TcMApbweEYtKC-lqq2Zc0lOkavKzI\" }}   You can now use this token directly  curl http://localhost:8080/api/user.all -H  'Authorization: Bearer <your token>'",
            "title": "Create a bearer token"
        },
        {
            "location": "/articles/users/#renew-a-token",
            "text": "You can renew a bearer token to extend its expiration time. For this you must use the renewToken provided when your first requested the token.   Obviously you need to renew a token before its expiration.   curl http://localhost:8080/api/renewToken -H  'Authorization: Bearer <your bearer token>'  -XPOST -d  '{\"renewToken\": \"<your renew token>\"}'  -H  'Content-Type: application/json'   For more information about using token read  this",
            "title": "Renew a token"
        },
        {
            "location": "/articles/users/#how-to-specify-a-custom-secret-key-for-production",
            "text": "Vulcain  uses a default secret key to create token. If you want to deploy  vulcain  service in production you  MUST  provide a new secret key.  This secret key must be shared by all services using bearer token. The best way to share a property is to use a  dynamic property . But like all dynamic properties you can simply use an environment variable.  Three properties can be defined:     Property name  Environment variable  description      vulcainSecretKey  VULCAIN_SECRET_KEY  Secret key    vulcainTokenIssuer  VULCAIN_TOKEN_ISSUER  Token issuer    vulcainTokenExpiration  VULCAIN_TOKEN_EXPIRATION  Token expiration (default 20m)      Under the hood,  vulcain  uses  jsonwebtoken .",
            "title": "How to specify a custom secret key for production"
        },
        {
            "location": "/articles/users/#create-apikey",
            "text": "Apikey can be created with the  apikey.create  verb (see service description for details) and can be used like a bearer token by replacing the  Authorization: Bearer <token>  by  Authorization: ApiKey <apikey>  Apikey has no expiration time and must be revoked with the  apikey.delete  verb.  Since apikey validation process needs to access apikey data, if you want to use apikey authentication in another service, you must specify how to access to the user service by adding the following line in  initializeDefaultServices .     this . enableApiKeyAuthentication ( \"users-service\" );   // Set with the name of the users service",
            "title": "Create apikey"
        },
        {
            "location": "/articles/users/#extend-default-user-model",
            "text": "Vulcain  uses a default user model, you can extend or replace it in your user service by adding a new user model.  To extends the default user model, add this file into the src/api hierarchy.  import   {   User   }   from   \"vulcain-users\" ;  import   {   Model ,   Property   }   from   \"vulcain-corejs\" ;  @Model ({   name :   ' User ' ,   extends :   ' + User '   })  export   class   MyUser   extends   User   { \n     @Property ({ type :   ' number ' }) \n     age :   number ;  }   The thing to note is the  extends  syntax with a '+' prefix before the model to extend. This means inheriting and extending an existing model and replace it with this new one.  To replace an existing model with a new one, use  extends: \"-User\"  instead.   Be carefull with that, you must implement all default model behaviors like password protection.",
            "title": "Extend default user model"
        },
        {
            "location": "/articles/dynamicProperties/",
            "text": "Creating a dynamic properties server\n\u00b6\n\n\n[TODO]\n\n\n[code source](\nvulcainjs",
            "title": "Configuration properties server"
        },
        {
            "location": "/articles/dynamicProperties/#creating-a-dynamic-properties-server",
            "text": "[TODO]  [code source]( vulcainjs",
            "title": "Creating a dynamic properties server"
        },
        {
            "location": "/articles/setupVulcainDemo/",
            "text": "How to setup Vulcain Demo on an Azure Virtual machine\n\u00b6\n\n\nPrerequisites\n\u00b6\n\n\nTo follow this \nHow-to\n you need a valid Azure Subscription and \ndocker-machine\n installed \n\n\nGet your Azure subscription\n\u00b6\n\n\nOn the Azure portal get your Azure subscription ID\n\n\nCreate Docker VM with \ndocker-machine\n\u00b6\n\n\nExecute the following command to setup a docker machine on Azure:\n\n\ndocker-machine create -d azure --azure-ssh-user <user-name> --azure-subscription-id <azure-subscription-id> --azure-resource-group <optional-resource-group-name> --azure-location <optional-azure-location> --azure-open-port 80 <machine-name>\n\n\n\n\n\nAll parameters and default values are available \nhere\n\n\nCheck the 'docker-machine' environment\n\u00b6\n\n\nRun the following command to display the 'docker-machine' environment configuration\n\n\ndocker-machine env <machine-name>\n\n\n\n\n\nWhich should result to something like this on \nWindows\n\n\n$Env:DOCKER_TLS_VERIFY = \"1\"\n$Env:DOCKER_HOST = \"tcp://<vm-ip>:2376\"\n$Env:DOCKER_CERT_PATH = \"<path>\"\n$Env:DOCKER_MACHINE_NAME = \"<machine-name>\"\n$Env:COMPOSE_CONVERT_WINDOWS_PATHS = \"true\"\n# Run this command to configure your shell:\n# & \"C:\\Program Files\\Docker\\Docker\\Resources\\bin\\docker-machine.exe\" env <machine-name> | Invoke-Expression\n\n\n\n\n\nDeploy vulcain-demo images\n\u00b6\n\n\nClone the following repository from \ngithub vulcain-demo\n\n\ngit clone https://github.com/vulcainjs/vulcain-demo.git\n\n\nOn \nWindows\n you'll need to run \n./install-demo.ps1 --hostName <machine-name>\n script from the root directory using \nPowerShell\n\n\nOnce everything is setup you should see the following message\n\n\n\n\nVulcain UI is available at http://\n\\:8080 user: admin/vulcain\n\n\n\n\nPost install configuration\n\u00b6\n\n\nBefore accessing Vulcain UI through \n:8080\n port you need to openup this port for inbound traffic on the VM firewall (\n-firewall). The same applies to ElasticSearch ports (9200-9300) where a predefined rule is available in the firewall port settings.\n\n\nIf you wish to stop and start the Vulcain VM you may endup with a different IP address. You can setup a DNS entry for this machine from the Azure portal on your VM public ip blade (\n-ip) under configuration / DNS name label\n\n\n\n\nThis way you can access \nvulcain-ui\n with an address like:\n\n\nhttp://\n.\n.cloudapp.azure.com:8080\n\n\n\n\nYou may also use this address in your \nvulcain-cli\n configuration",
            "title": "Setup Vulcain Demo on Azure"
        },
        {
            "location": "/articles/setupVulcainDemo/#how-to-setup-vulcain-demo-on-an-azure-virtual-machine",
            "text": "",
            "title": "How to setup Vulcain Demo on an Azure Virtual machine"
        },
        {
            "location": "/articles/setupVulcainDemo/#prerequisites",
            "text": "To follow this  How-to  you need a valid Azure Subscription and  docker-machine  installed",
            "title": "Prerequisites"
        },
        {
            "location": "/articles/setupVulcainDemo/#get-your-azure-subscription",
            "text": "On the Azure portal get your Azure subscription ID",
            "title": "Get your Azure subscription"
        },
        {
            "location": "/articles/setupVulcainDemo/#create-docker-vm-with-docker-machine",
            "text": "Execute the following command to setup a docker machine on Azure:  docker-machine create -d azure --azure-ssh-user <user-name> --azure-subscription-id <azure-subscription-id> --azure-resource-group <optional-resource-group-name> --azure-location <optional-azure-location> --azure-open-port 80 <machine-name>  All parameters and default values are available  here",
            "title": "Create Docker VM with docker-machine"
        },
        {
            "location": "/articles/setupVulcainDemo/#check-the-docker-machine-environment",
            "text": "Run the following command to display the 'docker-machine' environment configuration  docker-machine env <machine-name>  Which should result to something like this on  Windows  $Env:DOCKER_TLS_VERIFY = \"1\"\n$Env:DOCKER_HOST = \"tcp://<vm-ip>:2376\"\n$Env:DOCKER_CERT_PATH = \"<path>\"\n$Env:DOCKER_MACHINE_NAME = \"<machine-name>\"\n$Env:COMPOSE_CONVERT_WINDOWS_PATHS = \"true\"\n# Run this command to configure your shell:\n# & \"C:\\Program Files\\Docker\\Docker\\Resources\\bin\\docker-machine.exe\" env <machine-name> | Invoke-Expression",
            "title": "Check the 'docker-machine' environment"
        },
        {
            "location": "/articles/setupVulcainDemo/#deploy-vulcain-demo-images",
            "text": "Clone the following repository from  github vulcain-demo  git clone https://github.com/vulcainjs/vulcain-demo.git  On  Windows  you'll need to run  ./install-demo.ps1 --hostName <machine-name>  script from the root directory using  PowerShell  Once everything is setup you should see the following message   Vulcain UI is available at http:// \\:8080 user: admin/vulcain",
            "title": "Deploy vulcain-demo images"
        },
        {
            "location": "/articles/setupVulcainDemo/#post-install-configuration",
            "text": "Before accessing Vulcain UI through  :8080  port you need to openup this port for inbound traffic on the VM firewall ( -firewall). The same applies to ElasticSearch ports (9200-9300) where a predefined rule is available in the firewall port settings.  If you wish to stop and start the Vulcain VM you may endup with a different IP address. You can setup a DNS entry for this machine from the Azure portal on your VM public ip blade ( -ip) under configuration / DNS name label   This way you can access  vulcain-ui  with an address like:  http:// . .cloudapp.azure.com:8080   You may also use this address in your  vulcain-cli  configuration",
            "title": "Post install configuration"
        },
        {
            "location": "/plugins/",
            "text": "Plugins\n\u00b6\n\n\nVulcainjs plugins allows you to quickly build microservices.\n\n\nMessaging\n\u00b6\n\n\n\n\nvulcainjs-websocket\n\n    WebSocket integration to vulcainjs framework\n\n\n\n\nDocumentation\n\u00b6\n\n\n\n\nvulcainjs-swagger-ui\n\n    An easy swagger-ui for vulcainjs",
            "title": "Plugins"
        },
        {
            "location": "/plugins/#plugins",
            "text": "Vulcainjs plugins allows you to quickly build microservices.",
            "title": "Plugins"
        },
        {
            "location": "/plugins/#messaging",
            "text": "vulcainjs-websocket \n    WebSocket integration to vulcainjs framework",
            "title": "Messaging"
        },
        {
            "location": "/plugins/#documentation",
            "text": "vulcainjs-swagger-ui \n    An easy swagger-ui for vulcainjs",
            "title": "Documentation"
        },
        {
            "location": "/about/license/",
            "text": "License\n\u00b6\n\n\n                             Apache License\n                       Version 2.0, January 2004\n                    http://www.apache.org/licenses/\n\n\n\n\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n\n\n\n\n\nDefinitions.\n\n\n\"License\" shall mean the terms and conditions for use, reproduction,\n  and distribution as defined by Sections 1 through 9 of this document.\n\n\n\"Licensor\" shall mean the copyright owner or entity authorized by\n  the copyright owner that is granting the License.\n\n\n\"Legal Entity\" shall mean the union of the acting entity and all\n  other entities that control, are controlled by, or are under common\n  control with that entity. For the purposes of this definition,\n  \"control\" means (i) the power, direct or indirect, to cause the\n  direction or management of such entity, whether by contract or\n  otherwise, or (ii) ownership of fifty percent (50%) or more of the\n  outstanding shares, or (iii) beneficial ownership of such entity.\n\n\n\"You\" (or \"Your\") shall mean an individual or Legal Entity\n  exercising permissions granted by this License.\n\n\n\"Source\" form shall mean the preferred form for making modifications,\n  including but not limited to software source code, documentation\n  source, and configuration files.\n\n\n\"Object\" form shall mean any form resulting from mechanical\n  transformation or translation of a Source form, including but\n  not limited to compiled object code, generated documentation,\n  and conversions to other media types.\n\n\n\"Work\" shall mean the work of authorship, whether in Source or\n  Object form, made available under the License, as indicated by a\n  copyright notice that is included in or attached to the work\n  (an example is provided in the Appendix below).\n\n\n\"Derivative Works\" shall mean any work, whether in Source or Object\n  form, that is based on (or derived from) the Work and for which the\n  editorial revisions, annotations, elaborations, or other modifications\n  represent, as a whole, an original work of authorship. For the purposes\n  of this License, Derivative Works shall not include works that remain\n  separable from, or merely link (or bind by name) to the interfaces of,\n  the Work and Derivative Works thereof.\n\n\n\"Contribution\" shall mean any work of authorship, including\n  the original version of the Work and any modifications or additions\n  to that Work or Derivative Works thereof, that is intentionally\n  submitted to Licensor for inclusion in the Work by the copyright owner\n  or by an individual or Legal Entity authorized to submit on behalf of\n  the copyright owner. For the purposes of this definition, \"submitted\"\n  means any form of electronic, verbal, or written communication sent\n  to the Licensor or its representatives, including but not limited to\n  communication on electronic mailing lists, source code control systems,\n  and issue tracking systems that are managed by, or on behalf of, the\n  Licensor for the purpose of discussing and improving the Work, but\n  excluding communication that is conspicuously marked or otherwise\n  designated in writing by the copyright owner as \"Not a Contribution.\"\n\n\n\"Contributor\" shall mean Licensor and any individual or Legal Entity\n  on behalf of whom a Contribution has been received by Licensor and\n  subsequently incorporated within the Work.\n\n\n\n\n\n\nGrant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n\n\n\n\n\nGrant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n\n\n\n\n\nRedistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n\n(a) You must give any other recipients of the Work or\n      Derivative Works a copy of this License; and\n\n\n(b) You must cause any modified files to carry prominent notices\n      stating that You changed the files; and\n\n\n(c) You must retain, in the Source form of any Derivative Works\n      that You distribute, all copyright, patent, trademark, and\n      attribution notices from the Source form of the Work,\n      excluding those notices that do not pertain to any part of\n      the Derivative Works; and\n\n\n(d) If the Work includes a \"NOTICE\" text file as part of its\n      distribution, then any Derivative Works that You distribute must\n      include a readable copy of the attribution notices contained\n      within such NOTICE file, excluding those notices that do not\n      pertain to any part of the Derivative Works, in at least one\n      of the following places: within a NOTICE text file distributed\n      as part of the Derivative Works; within the Source form or\n      documentation, if provided along with the Derivative Works; or,\n      within a display generated by the Derivative Works, if and\n      wherever such third-party notices normally appear. The contents\n      of the NOTICE file are for informational purposes only and\n      do not modify the License. You may add Your own attribution\n      notices within Derivative Works that You distribute, alongside\n      or as an addendum to the NOTICE text from the Work, provided\n      that such additional attribution notices cannot be construed\n      as modifying the License.\n\n\nYou may add Your own copyright statement to Your modifications and\n  may provide additional or different license terms and conditions\n  for use, reproduction, or distribution of Your modifications, or\n  for any such Derivative Works as a whole, provided Your use,\n  reproduction, and distribution of the Work otherwise complies with\n  the conditions stated in this License.\n\n\n\n\n\n\nSubmission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n\n\n\n\n\nTrademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n\n\n\n\n\nDisclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n\n\n\n\n\nLimitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n\n\n\n\n\nAccepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n\n\n\n\n\nEND OF TERMS AND CONDITIONS\n\n\nAPPENDIX: How to apply the Apache License to your work.\n\n\n  To apply the Apache License to your work, attach the following\n  boilerplate notice, with the fields enclosed by brackets \"{}\"\n  replaced with your own identifying information. (Don't include\n  the brackets!)  The text should be enclosed in the appropriate\n  comment syntax for the file format. We also recommend that a\n  file or class name and description of purpose be included on the\n  same \"printed page\" as the copyright notice for easier\n  identification within third-party archives.\n\n\n\n\n\nCopyright {yyyy} {name of copyright owner}\n\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\n\n\n\n\nUnless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.",
            "title": "license"
        },
        {
            "location": "/about/license/#license",
            "text": "Apache License\n                       Version 2.0, January 2004\n                    http://www.apache.org/licenses/  TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION    Definitions.  \"License\" shall mean the terms and conditions for use, reproduction,\n  and distribution as defined by Sections 1 through 9 of this document.  \"Licensor\" shall mean the copyright owner or entity authorized by\n  the copyright owner that is granting the License.  \"Legal Entity\" shall mean the union of the acting entity and all\n  other entities that control, are controlled by, or are under common\n  control with that entity. For the purposes of this definition,\n  \"control\" means (i) the power, direct or indirect, to cause the\n  direction or management of such entity, whether by contract or\n  otherwise, or (ii) ownership of fifty percent (50%) or more of the\n  outstanding shares, or (iii) beneficial ownership of such entity.  \"You\" (or \"Your\") shall mean an individual or Legal Entity\n  exercising permissions granted by this License.  \"Source\" form shall mean the preferred form for making modifications,\n  including but not limited to software source code, documentation\n  source, and configuration files.  \"Object\" form shall mean any form resulting from mechanical\n  transformation or translation of a Source form, including but\n  not limited to compiled object code, generated documentation,\n  and conversions to other media types.  \"Work\" shall mean the work of authorship, whether in Source or\n  Object form, made available under the License, as indicated by a\n  copyright notice that is included in or attached to the work\n  (an example is provided in the Appendix below).  \"Derivative Works\" shall mean any work, whether in Source or Object\n  form, that is based on (or derived from) the Work and for which the\n  editorial revisions, annotations, elaborations, or other modifications\n  represent, as a whole, an original work of authorship. For the purposes\n  of this License, Derivative Works shall not include works that remain\n  separable from, or merely link (or bind by name) to the interfaces of,\n  the Work and Derivative Works thereof.  \"Contribution\" shall mean any work of authorship, including\n  the original version of the Work and any modifications or additions\n  to that Work or Derivative Works thereof, that is intentionally\n  submitted to Licensor for inclusion in the Work by the copyright owner\n  or by an individual or Legal Entity authorized to submit on behalf of\n  the copyright owner. For the purposes of this definition, \"submitted\"\n  means any form of electronic, verbal, or written communication sent\n  to the Licensor or its representatives, including but not limited to\n  communication on electronic mailing lists, source code control systems,\n  and issue tracking systems that are managed by, or on behalf of, the\n  Licensor for the purpose of discussing and improving the Work, but\n  excluding communication that is conspicuously marked or otherwise\n  designated in writing by the copyright owner as \"Not a Contribution.\"  \"Contributor\" shall mean Licensor and any individual or Legal Entity\n  on behalf of whom a Contribution has been received by Licensor and\n  subsequently incorporated within the Work.    Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.    Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.    Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:  (a) You must give any other recipients of the Work or\n      Derivative Works a copy of this License; and  (b) You must cause any modified files to carry prominent notices\n      stating that You changed the files; and  (c) You must retain, in the Source form of any Derivative Works\n      that You distribute, all copyright, patent, trademark, and\n      attribution notices from the Source form of the Work,\n      excluding those notices that do not pertain to any part of\n      the Derivative Works; and  (d) If the Work includes a \"NOTICE\" text file as part of its\n      distribution, then any Derivative Works that You distribute must\n      include a readable copy of the attribution notices contained\n      within such NOTICE file, excluding those notices that do not\n      pertain to any part of the Derivative Works, in at least one\n      of the following places: within a NOTICE text file distributed\n      as part of the Derivative Works; within the Source form or\n      documentation, if provided along with the Derivative Works; or,\n      within a display generated by the Derivative Works, if and\n      wherever such third-party notices normally appear. The contents\n      of the NOTICE file are for informational purposes only and\n      do not modify the License. You may add Your own attribution\n      notices within Derivative Works that You distribute, alongside\n      or as an addendum to the NOTICE text from the Work, provided\n      that such additional attribution notices cannot be construed\n      as modifying the License.  You may add Your own copyright statement to Your modifications and\n  may provide additional or different license terms and conditions\n  for use, reproduction, or distribution of Your modifications, or\n  for any such Derivative Works as a whole, provided Your use,\n  reproduction, and distribution of the Work otherwise complies with\n  the conditions stated in this License.    Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.    Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.    Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.    Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.    Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.    END OF TERMS AND CONDITIONS  APPENDIX: How to apply the Apache License to your work.    To apply the Apache License to your work, attach the following\n  boilerplate notice, with the fields enclosed by brackets \"{}\"\n  replaced with your own identifying information. (Don't include\n  the brackets!)  The text should be enclosed in the appropriate\n  comment syntax for the file format. We also recommend that a\n  file or class name and description of purpose be included on the\n  same \"printed page\" as the copyright notice for easier\n  identification within third-party archives.  Copyright {yyyy} {name of copyright owner}  Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at     http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.",
            "title": "License"
        }
    ]
}