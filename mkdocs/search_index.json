{
    "docs": [
        {
            "location": "/",
            "text": "<style>\n  .lead {\n    color: #555;\n    font-weight: normal;\n  }\n\n  .btn-default {\n    background-image: linear-gradient(#fff, #fff 60%, #f5f5f5);\n    border-bottom: 1px solid #e6e6e6;\n  }\n\n  .head-banner-text {\n    padding: 20px 0 0 0;\n  }\n  .head-banner-buttons {\n    padding: 0 0 20px;\n  }  \n\n\n\n\n\n    \n\n        \n\n        \n\n            \n\n            \n\n            \n\n            \n\n        \n\n\n        \n\n            \n\n                \n\n                    \n                   \n                \n\n                \n\n                    \n\n                \n\n                \n\n                    \n\n                \n\n                \n\n                    \n\n                \n                \n            \n\n\n            \n\n            \n\n                \n\n                \nPrevious\n\n            \n\n            \n\n                \n\n                \nNext\n\n            \n\n    \n\n\n\n\n\n\n    \n\n        Open-Source Microservice Framework for nodejs (Preview)\n\n    \n\n\n\n\n\n\n    \n\n        \nDownload\n\n    \n\n    \n\n        \nView On GitHub\n\n    \n\n\n\n\n\n\n    \n\n        \nFeatures\n\n        \n\n            \n\n            \nFully deployable on Docker\n\n            \nHystrix command implementation (circuit-breaker, bulkhead, timeout)\n\n            \nContext propagation (user context, correlation id...)\n            \nCQRS implementation\n\n            \nFully extensible whith adapters\n\n            \nInput data validation\n\n            \nDefault implementation (MongoDb, rabbitmq, statsd, swarm)\n\n            \nAuthoring tool (Creating project from template, code generation...)\n\n            \nMetrics generation\n\n            \n\n        \n\n    \n\n    \n\n        \nEnterprise ready\n\n        \n\n            \n\n            \nDynamic configuration properties\n\n            \nService versionning\n\n            \nFeature teams and domains\n\n            \nEnvironment management\n\n            \nBuilt-in metadata service description (entry points description, service dependencies)\n\n            \nLog obfuscation for sensible data\n\n            \nUser interface management for teams\n\n            \nAutomatic metrics generation\n\n            \nMulti-tenants\n\n            \nDistributed request log aggregation with correlation-id\n\n            \n\n        \n\n    \n\n    \n\n        \nVideo overview",
            "title": "Home"
        },
        {
            "location": "/gettingStarted/",
            "text": "Getting started\n\n\nIn this tutorial, we will create two micro-services, a backend service and a facade service calling the backend service.\n\n\nWe will see:\n\n\n\n\nHow to create a new service\n\n\nHow to generate a proxy class for calling another micro-service\n\n\nHow to display monitoring with hystrix dashboard\n\n\nHow to add fallback response for providing compensation when a service is down\n\n\n\n\nPrerequisites\n\n\n\n\nnode >= 6.0 see \nthis link\n to install node on your machine.\n\n\ndocker version >= 1.12. See \nthis link\n to install docker.\n\n\nvulcain-cli\n You can install it with\n\n\n\n\nnpm install vulcain-cli -g\n\n\n\n\n\nCreating the backend service\n\n\nCreating a new microservice project is easy with \nvulcain-cli\n. The following command creates a new project\nfrom a template. This template provides a sample customer management service.\n\n\nvulcain create customers-service\n\n\n\n\n\nThis template is fully operational, you can go to the code, and test it directly in local mode\nusing \nhttp://localhost:8080/api\n with curl or postman.\n\n\n\n\nInfo\n\n\nVulcain templates are predefined to be used with \nvscode\n or \nwebstorm\n.\n\n\n\n\nTry some urls to see how \nvulcain\n works:\n\n\n\n\n\n\n\n\nurl (prefixed with localhost:8080)\n\n\nHttp Verb\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n/api/_servicedescription\n\n\nGET\n\n\nShow service description (metadata)\n\n\n\n\n\n\n/api/_servicedependencies\n\n\nGET\n\n\nShow service dependencies (metadata)\n\n\n\n\n\n\n/api\n\n\nGET\n\n\nDisplay all customers (this is the default behavior)\n\n\n\n\n\n\n/api/customer.all\n\n\nGET\n\n\nIdem\n\n\n\n\n\n\n/api/customer.create\n\n\nPOST\n\n\nCreate a customer (see below)\n\n\n\n\n\n\n/api/customer.delete\n\n\nPOST\n\n\nDelete a customer\n\n\n\n\n\n\n/api/customer.update\n\n\nPOST\n\n\nUpdate a customer\n\n\n\n\n\n\n\n\n\n\nGo to \nconcepts\n to see more infos on the vulcain protocol.\n\n\n\n\nNow we can publish this service in a local demo swarm cluster.\n\n\ndocker build -t customers-service:1.0 .\nvulcain run customers-service:1.0\n\n\n\n\n\n\n\nInfo\n\n\nyou can also use ./build.sh 1.0 to build the service.\n\n\n\n\n\n\nvulcain run\n initializes a swarm cluster if any and create a net-vulcain network and create a new docker service.\n\n\n\n\nThe service is now available with a new exposed port (30000 if this is the first service in your swarm cluster). This port is displayed when the vulcain run command ends.\n\n\nLet's try to create some customers using this new port using the \ncustomer.create\n action.\nE.g.\n\n\ncurl -XPOST localhost:30000/api/customer.create -d \n'{\"firstName\":\"Albert\", \"lastName\": \"Einstein\"}'\n -H \n'Content-Type: application/json'\n\n\n\n\n\n\nYou can list all customers with /api/customer.all (or /api).\n\n\n\n\nWarning\n\n\nBy default, data is stored in memory and will be lost if you restart the container.\n\n\n\n\nCreating the facade service\n\n\nWe will now create a new facade service exposing a customer with an additional fullName property.\n\n\nCreate a new service facade-service.\n\n\nvulcain create facade-service\n\n\n\n\n\nThen open the project and remove the \nsrc/api/samples\n folder to start with a new clean project.\n\n\nThe first thing to do is to create a model. A model (or schema) describes data manipulated by the service. It offers many\ncapabilities:\n\n\n\n\nFor input data, it is used to check and validate argument values (raising a 400 bad request error if any errors)\n\n\nFor storing data, it can be used by the \ndefault\n provider to get some persistance information like key definition, uniqueness, collection name...\n\n\nFor metadata description, it is used to display information (with /api/_servicedescription) usefull to code generation or other tools.\n\n\n\n\nCreate a new file /src/api/model.ts and copy/paste the following code:\n\n\nimport\n \n{\n \nProperty\n,\n \nModel\n \n}\n \nfrom\n \n\"vulcain-corejs\"\n;\n\n\n\n@Model\n()\n\n\nexport\n \nclass\n \nCustomerView\n \n{\n\n    \n@Property\n({\n \ntype\n:\n \n'\nstring\n'\n \n})\n\n    \nfullName\n:\n \nstring\n;\n\n    \n@Property\n({\n \ntype\n:\n \n'\nstring\n'\n \n})\n\n    \nfirstName\n:\n \nstring\n;\n\n    \n@Property\n({\n \ntype\n:\n \n'\nstring\n'\n \n})\n\n    \nlastName\n:\n \nstring\n;\n\n\n}\n\n\n\n\n\n\nThis is a very basic model, it has the properties of a customer with an additional fullName property.\nSince this model will be used for output response, no validation is added.\n\n\nNow we will create an handler to query a customer view.\n\n\nimport\n \n{\n \nQueryHandler\n,\n \nQuery\n,\n \nAbstractQueryHandler\n,\n \nCommand\n,\n \nServiceDependency\n,\n \nAbstractServiceCommand\n,\n \nIHasFallbackCommand\n \n}\n \nfrom\n \n\"vulcain-corejs\"\n;\n\n\nimport\n \n{\n \nCustomerView\n \n}\n \nfrom\n \n\"./model\"\n;\n\n\nimport\n \n{\n \nCustomersService\n,\n \nCustomer\n \n}\n \nfrom\n \n\"./customersService10\"\n;\n\n\n\n@QueryHandler\n({\n \nscope\n:\n \n'?'\n \n})\n\n\nexport\n \nclass\n \nMyQueryHandler\n \nextends\n \nAbstractQueryHandler\n \n{\n\n\n    \n@Query\n({\n \ndescription\n:\n \n\"Get a list of customers\"\n,\n \noutputSchema\n:\n \nCustomerView\n \n})\n\n    \nasync\n \nCustomerViewsAsync\n()\n \n{\n\n        \nlet\n \ncustomersService\n \n=\n \nnew\n \nCustomersService\n(\nthis\n.\nrequestContext\n);\n\n        \nlet\n \ncustomers\n \n=\n \nawait\n \ncustomersService\n.\ngetAllCustomerAsync\n();\n\n        \nreturn\n \ncustomers\n.\nmap\n(\nc\n \n=>\n \n{\n\n            \nreturn\n \n{\n\n                \nfirstName\n:\n \nc\n.\nfirstName\n,\n\n                \nlastName\n:\n \nc\n.\nlastName\n,\n\n                \nfullName\n:\n \nc\n.\nfirstName\n \n+\n \n' '\n \n+\n \nc\n.\nlastName\n\n            \n};\n\n        \n});\n\n    \n}\n\n\n}\n\n\n\n\n\n\nHandler anatomy\n\n\n\n\nAn handler is just a class with annoted methods. These annotations describe how the handler can be requested. There are 3 kinds of handler: \nQuery handler\n, \nAction handler\n and \nEvent handler\n. See \nconcepts\n\n\nThe \nQueryHandler\n annotation tells that the class exposes handler(s) for query (accessible with a GET http verb) and can define default configurations. In this case, the handler could be requested by any (anonymous) user thanks to the \nscope:'?'\n property.\n\n\nThe \nQuery\n annotation is used to expose a method. Annotations have mandatory properties used to describe the service. The query will be accessible from \n/api/customersview\n (The name is inferred from the method name and removing the Async suffix).\n\n\nThe handler code is like any traditional method. With some specificities:\n\n\nIt can take only one argument described by a model. This model will be validated before the method is called and raise a Bad Request error in case of errors.\n\n\nThe return value must be described by a model (can be the same as the input argument). This is used to describe the service.\n\n\nIf any error occurs, a 500 http error will be sent to the client.\n\n\n\n\n\n\n\n\nYou can note that the service uses a custom service class (\nCustomersService\n) to read all customers. This is a proxy class requesting our first service : customers-service.\n\n\nBut how can i create this proxy class ?\n\n\nCommunication between services\n\n\nThanks to the metadata description hability of any vulcain service, we can use dedicated tooling to generate code. Code generation uses template to generate a static class with typed method sending request that are high tolerance, monitored and vulcain compatible.\n\n\nVulcain compatible means context propagation : security context, global correlation id, tenant information...\n\n\nTo generate the proxy class, we need some information:\n\n\n\n\nAddress of the target service. In our case, localhost:30000\n\n\nA template to use, by default this is microServiceProxy (for generating vulcain proxy). The other template is angularServiceProxy to generate proxy class for angular application.\n\n\nThe folder where the generated file will be saved. Default is the current folder.\n\n\n\n\nTo generate the class, type the following code from the application root folder.\n\n\nvulcain generate --address localhost:30000 --folder src/api\n\n\n\n\n\nThe proxy class encapsulates all requests into \nhystrix commands\n providing circuit breaker, timeout, bulkhead and monitoring.\n\n\nNow you can compile and test the service locally with:\n\n\ncurl http://localhost:8080/api/customersview\n\n\n\n\n\nResult depends of how many customers you created before, but note the standardized response format.\n\n\nMonitoring command request with hystrix dashboard\n\n\nTo enable hystrix monitoring, just set the variable \nenableHystrixStream\n to \ntrue\n in startup.ts.\n\n\nTo visualize metrics, we need to start hystrix dashboard with the following command:\n\n\ndocker service create --network net-vulcain -p \n9999\n:9002 --name hystrix-dashboard mlabouardy/hystrix-dashboard:latest\n\n\n\n\n\nThen open the dashboard on \nhttp://localhost:9999/hyxtrix\n, set the service endpoint with \nhttp://<host ip>:8080/hystrix.stream\n and click on \nMonitor Stream\n.\n\n\nYou can test monitoring by calling many requests.\nFor example with :\n\n\nab -n \n200\n http://localhost:8080/api/customersview\n\n\n\n\n\nYou must see something like this:\n\n\n\n\n\n\nInfo\n\n\nNote how the service ip address changes depending on where you call it. To test the service, you can use \nlocalhost\n but since hystrix is running within a container you must provide the host ip.\n\n\nIf the service were deployed as a swarm service, you can access it with a standardized DNS name corresponding to the service name + its version (removing all special characters).\n\n\nFor example, if you deploy the service with \nvulcain run service-facade:1.0\n, you can monitor it with the address \nhttp://servicefacade10:8080/hystrix.stream\n.\n\n\n\n\nFailure compensation\n\n\nCalling microservice over http is not a long quiet stream, many errors can occur and you must be prepared for this.\nFor this situation, \nvulcain\n uses an hystrix implementation of command. You can configure the command behavior with annotation. For example, the following command has a 1500ms timeout protecting from long requests.\n\n\nThis is the microservice philosophy : Service can failed but quickly.\n\n\nFor most scenarii, if the request failed it's better to send a default response than an error message. This is the role of the compensation (fallBack) method.\n\n\n\n\nYou can try a request failure by removing the backend service with \ndocker service rm customersservice10\n and by requesting the facade service. Due to the default 1500ms timeout, errors will occur quickly. You can see it in hystrix dashboard.\n\n\n\n\n\n\nBefore adding a compensation, we need to understand how the service proxy class works. This class provides a method for each endpoints (handlers) of the target service. Every time a call is made to an endpoint, a (hystrix) command is created by the proxy to encapsulate this call. By default, all calls of the same proxy use the same command named \n<service name>Command\n.\n\n\nIf you need to customize a call, you need to customize a command but only for this specific call. To do that, the proxy class will check for every call if a specific command exists for this call otherwise it will use the default command. A specific command is identified by a name like \n<service name><method name>Command\n.\n\n\nSince we will customize a call to \ngetAllCustomerAsync\n of the proxy class named \nCustomersService\n we need to create a new command named \nCustomersServiceGetAllCustomer\n (Async is always removed for naming).\n\n\nTo add compensation we need to provide a \nfallback\n method returning the default value.\n\n\nYou can now create a new file in src/api/ containing the following code.\n\n\n@Command\n({\n \nexecutionTimeoutInMilliseconds\n:\n \n1500\n \n})\n\n\n@ServiceDependency\n(\n'\ncustomers\n-\nservice\n'\n,\n \n'\n1.0\n'\n,\n \n'\nhttp\n:\n//localhost:32772/api/_servicedescription')\n\n\nexport\n \nclass\n \nCustomersServiceGetAllCustomerCommand\n \nextends\n \nAbstractServiceCommand\n\n    \nimplements\n \nIHasFallbackCommand\n<\nCustomer\n[]>\n \n{\n\n    \nasync\n \nfallbackAsync\n():\n \nPromise\n<\nCustomer\n[]>\n \n{\n\n        \nreturn\n \n[{\n\n            \nfirstName\n:\n \n\"John\"\n,\n \nlastName\n:\n \n\"Lennon\"\n\n        \n}];\n\n    \n}\n\n\n}\n\n\n\n\n\n\nAnnotations are copied from the default generated command. You can see how to set timeout delay and how to define informations used for service description.\n\n\nFallback method is called on every error during the request including timeout.\n\n\nNow if you request the facade service, the compensation response will be returned.",
            "title": "My first microservices"
        },
        {
            "location": "/gettingStarted/#getting-started",
            "text": "In this tutorial, we will create two micro-services, a backend service and a facade service calling the backend service.  We will see:   How to create a new service  How to generate a proxy class for calling another micro-service  How to display monitoring with hystrix dashboard  How to add fallback response for providing compensation when a service is down",
            "title": "Getting started"
        },
        {
            "location": "/gettingStarted/#prerequisites",
            "text": "node >= 6.0 see  this link  to install node on your machine.  docker version >= 1.12. See  this link  to install docker.  vulcain-cli  You can install it with   npm install vulcain-cli -g",
            "title": "Prerequisites"
        },
        {
            "location": "/gettingStarted/#creating-the-backend-service",
            "text": "Creating a new microservice project is easy with  vulcain-cli . The following command creates a new project\nfrom a template. This template provides a sample customer management service.  vulcain create customers-service  This template is fully operational, you can go to the code, and test it directly in local mode\nusing  http://localhost:8080/api  with curl or postman.   Info  Vulcain templates are predefined to be used with  vscode  or  webstorm .   Try some urls to see how  vulcain  works:     url (prefixed with localhost:8080)  Http Verb  Description      /api/_servicedescription  GET  Show service description (metadata)    /api/_servicedependencies  GET  Show service dependencies (metadata)    /api  GET  Display all customers (this is the default behavior)    /api/customer.all  GET  Idem    /api/customer.create  POST  Create a customer (see below)    /api/customer.delete  POST  Delete a customer    /api/customer.update  POST  Update a customer      Go to  concepts  to see more infos on the vulcain protocol.   Now we can publish this service in a local demo swarm cluster.  docker build -t customers-service:1.0 .\nvulcain run customers-service:1.0   Info  you can also use ./build.sh 1.0 to build the service.    vulcain run  initializes a swarm cluster if any and create a net-vulcain network and create a new docker service.   The service is now available with a new exposed port (30000 if this is the first service in your swarm cluster). This port is displayed when the vulcain run command ends.  Let's try to create some customers using this new port using the  customer.create  action.\nE.g.  curl -XPOST localhost:30000/api/customer.create -d  '{\"firstName\":\"Albert\", \"lastName\": \"Einstein\"}'  -H  'Content-Type: application/json'   You can list all customers with /api/customer.all (or /api).   Warning  By default, data is stored in memory and will be lost if you restart the container.",
            "title": "Creating the backend service"
        },
        {
            "location": "/gettingStarted/#creating-the-facade-service",
            "text": "We will now create a new facade service exposing a customer with an additional fullName property.  Create a new service facade-service.  vulcain create facade-service  Then open the project and remove the  src/api/samples  folder to start with a new clean project.  The first thing to do is to create a model. A model (or schema) describes data manipulated by the service. It offers many\ncapabilities:   For input data, it is used to check and validate argument values (raising a 400 bad request error if any errors)  For storing data, it can be used by the  default  provider to get some persistance information like key definition, uniqueness, collection name...  For metadata description, it is used to display information (with /api/_servicedescription) usefull to code generation or other tools.   Create a new file /src/api/model.ts and copy/paste the following code:  import   {   Property ,   Model   }   from   \"vulcain-corejs\" ;  @Model ()  export   class   CustomerView   { \n     @Property ({   type :   ' string '   }) \n     fullName :   string ; \n     @Property ({   type :   ' string '   }) \n     firstName :   string ; \n     @Property ({   type :   ' string '   }) \n     lastName :   string ;  }   This is a very basic model, it has the properties of a customer with an additional fullName property.\nSince this model will be used for output response, no validation is added.  Now we will create an handler to query a customer view.  import   {   QueryHandler ,   Query ,   AbstractQueryHandler ,   Command ,   ServiceDependency ,   AbstractServiceCommand ,   IHasFallbackCommand   }   from   \"vulcain-corejs\" ;  import   {   CustomerView   }   from   \"./model\" ;  import   {   CustomersService ,   Customer   }   from   \"./customersService10\" ;  @QueryHandler ({   scope :   '?'   })  export   class   MyQueryHandler   extends   AbstractQueryHandler   { \n\n     @Query ({   description :   \"Get a list of customers\" ,   outputSchema :   CustomerView   }) \n     async   CustomerViewsAsync ()   { \n         let   customersService   =   new   CustomersService ( this . requestContext ); \n         let   customers   =   await   customersService . getAllCustomerAsync (); \n         return   customers . map ( c   =>   { \n             return   { \n                 firstName :   c . firstName , \n                 lastName :   c . lastName , \n                 fullName :   c . firstName   +   ' '   +   c . lastName \n             }; \n         }); \n     }  }",
            "title": "Creating the facade service"
        },
        {
            "location": "/gettingStarted/#handler-anatomy",
            "text": "An handler is just a class with annoted methods. These annotations describe how the handler can be requested. There are 3 kinds of handler:  Query handler ,  Action handler  and  Event handler . See  concepts  The  QueryHandler  annotation tells that the class exposes handler(s) for query (accessible with a GET http verb) and can define default configurations. In this case, the handler could be requested by any (anonymous) user thanks to the  scope:'?'  property.  The  Query  annotation is used to expose a method. Annotations have mandatory properties used to describe the service. The query will be accessible from  /api/customersview  (The name is inferred from the method name and removing the Async suffix).  The handler code is like any traditional method. With some specificities:  It can take only one argument described by a model. This model will be validated before the method is called and raise a Bad Request error in case of errors.  The return value must be described by a model (can be the same as the input argument). This is used to describe the service.  If any error occurs, a 500 http error will be sent to the client.     You can note that the service uses a custom service class ( CustomersService ) to read all customers. This is a proxy class requesting our first service : customers-service.  But how can i create this proxy class ?",
            "title": "Handler anatomy"
        },
        {
            "location": "/gettingStarted/#communication-between-services",
            "text": "Thanks to the metadata description hability of any vulcain service, we can use dedicated tooling to generate code. Code generation uses template to generate a static class with typed method sending request that are high tolerance, monitored and vulcain compatible.  Vulcain compatible means context propagation : security context, global correlation id, tenant information...  To generate the proxy class, we need some information:   Address of the target service. In our case, localhost:30000  A template to use, by default this is microServiceProxy (for generating vulcain proxy). The other template is angularServiceProxy to generate proxy class for angular application.  The folder where the generated file will be saved. Default is the current folder.   To generate the class, type the following code from the application root folder.  vulcain generate --address localhost:30000 --folder src/api  The proxy class encapsulates all requests into  hystrix commands  providing circuit breaker, timeout, bulkhead and monitoring.  Now you can compile and test the service locally with:  curl http://localhost:8080/api/customersview  Result depends of how many customers you created before, but note the standardized response format.",
            "title": "Communication between services"
        },
        {
            "location": "/gettingStarted/#monitoring-command-request-with-hystrix-dashboard",
            "text": "To enable hystrix monitoring, just set the variable  enableHystrixStream  to  true  in startup.ts.  To visualize metrics, we need to start hystrix dashboard with the following command:  docker service create --network net-vulcain -p  9999 :9002 --name hystrix-dashboard mlabouardy/hystrix-dashboard:latest  Then open the dashboard on  http://localhost:9999/hyxtrix , set the service endpoint with  http://<host ip>:8080/hystrix.stream  and click on  Monitor Stream .  You can test monitoring by calling many requests.\nFor example with :  ab -n  200  http://localhost:8080/api/customersview  You must see something like this:    Info  Note how the service ip address changes depending on where you call it. To test the service, you can use  localhost  but since hystrix is running within a container you must provide the host ip.  If the service were deployed as a swarm service, you can access it with a standardized DNS name corresponding to the service name + its version (removing all special characters).  For example, if you deploy the service with  vulcain run service-facade:1.0 , you can monitor it with the address  http://servicefacade10:8080/hystrix.stream .",
            "title": "Monitoring command request with hystrix dashboard"
        },
        {
            "location": "/gettingStarted/#failure-compensation",
            "text": "Calling microservice over http is not a long quiet stream, many errors can occur and you must be prepared for this.\nFor this situation,  vulcain  uses an hystrix implementation of command. You can configure the command behavior with annotation. For example, the following command has a 1500ms timeout protecting from long requests.  This is the microservice philosophy : Service can failed but quickly.  For most scenarii, if the request failed it's better to send a default response than an error message. This is the role of the compensation (fallBack) method.   You can try a request failure by removing the backend service with  docker service rm customersservice10  and by requesting the facade service. Due to the default 1500ms timeout, errors will occur quickly. You can see it in hystrix dashboard.    Before adding a compensation, we need to understand how the service proxy class works. This class provides a method for each endpoints (handlers) of the target service. Every time a call is made to an endpoint, a (hystrix) command is created by the proxy to encapsulate this call. By default, all calls of the same proxy use the same command named  <service name>Command .  If you need to customize a call, you need to customize a command but only for this specific call. To do that, the proxy class will check for every call if a specific command exists for this call otherwise it will use the default command. A specific command is identified by a name like  <service name><method name>Command .  Since we will customize a call to  getAllCustomerAsync  of the proxy class named  CustomersService  we need to create a new command named  CustomersServiceGetAllCustomer  (Async is always removed for naming).  To add compensation we need to provide a  fallback  method returning the default value.  You can now create a new file in src/api/ containing the following code.  @Command ({   executionTimeoutInMilliseconds :   1500   })  @ServiceDependency ( ' customers - service ' ,   ' 1.0 ' ,   ' http : //localhost:32772/api/_servicedescription')  export   class   CustomersServiceGetAllCustomerCommand   extends   AbstractServiceCommand \n     implements   IHasFallbackCommand < Customer []>   { \n     async   fallbackAsync ():   Promise < Customer []>   { \n         return   [{ \n             firstName :   \"John\" ,   lastName :   \"Lennon\" \n         }]; \n     }  }   Annotations are copied from the default generated command. You can see how to set timeout delay and how to define informations used for service description.  Fallback method is called on every error during the request including timeout.  Now if you request the facade service, the compensation response will be returned.",
            "title": "Failure compensation"
        },
        {
            "location": "/reference/",
            "text": "Documentation\n\n\nDocumentation is in progress",
            "title": "Overview"
        },
        {
            "location": "/reference/#documentation",
            "text": "Documentation is in progress",
            "title": "Documentation"
        },
        {
            "location": "/reference/actions/",
            "text": "",
            "title": "Actions"
        },
        {
            "location": "/reference/query/",
            "text": "",
            "title": "Queries"
        },
        {
            "location": "/reference/event/",
            "text": "",
            "title": "Events"
        },
        {
            "location": "/reference/domain/",
            "text": "Domain model\n\n\nAll services belong to a domain like \nCustomer\n or \nBilling\n. Domain name is defined in every startup file and\nis available as a standard service (see \nstandard services\n)\n\n\nServices use \ndomain model\n, or \nSchema\n in vulcain context, to validate input data.\n\n\nSchemas\n are defined with annotations. Only well defined schema properties will be taken into account when requesting an handler.\n\n\nDefining a schema is really easy.\n\n\n@Model\n()\n\n\nexport\n \nclass\n \nCustomer\n \n{\n\n    \n@Property\n({\n \ntype\n:\n \n\"string\"\n,\n \nrequired\n: \ntrue\n \n})\n\n    \n@Validator\n(\n\"length\"\n,\n \n{\n \nmin\n: \n5\n \n})\n\n    \nfirstName\n: \nstring\n;\n\n    \n@Property\n({\n \ntype\n:\n \n\"string\"\n,\n \nrequired\n: \ntrue\n,\n \nunique\n: \ntrue\n,\n \nisKey\n: \ntrue\n \n})\n\n    \nlastName\n: \nstring\n;\n\n\n}\n\n\n\n\n\n\nThis code defines a \nCustomer\n model with 2 required properties.\n\n\nfirstName\n has a length validation and \nlastName\n provides some specific informations for the\ndefault provider implementation.",
            "title": "Domain models"
        },
        {
            "location": "/reference/domain/#domain-model",
            "text": "All services belong to a domain like  Customer  or  Billing . Domain name is defined in every startup file and\nis available as a standard service (see  standard services )  Services use  domain model , or  Schema  in vulcain context, to validate input data.  Schemas  are defined with annotations. Only well defined schema properties will be taken into account when requesting an handler.  Defining a schema is really easy.  @Model ()  export   class   Customer   { \n     @Property ({   type :   \"string\" ,   required :  true   }) \n     @Validator ( \"length\" ,   {   min :  5   }) \n     firstName :  string ; \n     @Property ({   type :   \"string\" ,   required :  true ,   unique :  true ,   isKey :  true   }) \n     lastName :  string ;  }   This code defines a  Customer  model with 2 required properties.  firstName  has a length validation and  lastName  provides some specific informations for the\ndefault provider implementation.",
            "title": "Domain model"
        },
        {
            "location": "/reference/injection/",
            "text": "Dependency injection\n\n\nVulcain\n provides a simple dependency injection mechanism limited to \nconstructor parameters injection\n\n\nIt uses annotations to declare dependencies.\n\n\nDeclaring services\n\n\nYou can declare service with the \n@Injectable\n annotation.\n\n\n@\nInjectable\n(\nLifeTime\n.\nSingleton\n)\n\n\nexport\n \nclass\n \nService1\n \n{}\n\n\n\n\n\n\nInjectable\n accepts three parameters:\n\n\n\n\n\n\n\n\nname\n\n\nrequired\n\n\n\n\n\n\n\n\n\n\n\n\nlifeTime\n\n\nyes\n\n\nService life time can be \nSingleton\n, \nScoped\n or \nTransient\n\n\n\n\n\n\nservice name\n\n\nfalse\n\n\ndefault to class name\n\n\n\n\n\n\nenableInTestOnly\n\n\nfalse\n\n\nRegister this service only in test mode (default false)\n\n\n\n\n\n\n\n\nwith \nlifeTime\n\n\n\n\n\n\n\n\nname\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSingleton\n\n\nOnly one instance will be created\n\n\n\n\n\n\nTransient\n\n\nA new instance is always created\n\n\n\n\n\n\nScoped\n\n\nSingleton instance by request scope\n\n\n\n\n\n\n\n\nUsing services\n\n\nAs mentioned above, dependency injection only works with constructor with \n@Inject\n annotation.\n\n\nexport\n \nclass\n \nMyClass\n \n{\n\n    \nconstructor\n(\n@\nInject\n(\n\"Service1\"\n)\n \nmyService\n:\n \nService1\n)\n \n{}\n\n\n}\n\n\n\n\n\n\nThe following rules are applied :\n\n\n\n\nUsing \n@Inject\n is mandatory to specify parameter injection.\n\n\nYou can mix injected parameters with \nclassic\n parameters however injected parameters must be declared first.\n\n\nWhen service starts, all services defined in the following folders are automatically registered : api/handlers,\napi/models, api/services and api/commands.\n\n\nScoped services are disposed when the request ends. You can provide your own \ndispose\n method.\n\n\nAll scoped services are initialized with a \nrequestContext\n property.\n\n\n\n\nService can be created manually using \ncontainer.get(\"service-name\")\n.\n\n\nAlso you can inject service manually with the following container methods :\n\n\n\n\ninjectTransient\n\n\ninjectSingleton\n and \ninjectInstance\n\n\ninjectScoped\n\n\n\n\nPredefined services\n\n\nVulcain provides predefined services available with standardized names.\nAll predefined service names are defined in a static class named \nDefaultServiceNames\n\n\n\n\n\n\n\n\nname\n\n\nservice\n\n\n\n\n\n\n\n\n\n\nContainer\n\n\nCurrent container (global) or scoped in requestContext\n\n\n\n\n\n\nTenantPolicy\n\n\nPolicy used to resolve TenantPolicy\n\n\n\n\n\n\nAuthorizationPolicy\n\n\nPolicy used to check authorization from ScopesDescriptor\n\n\n\n\n\n\nTokenService\n\n\nService to manage jwt token\n\n\n\n\n\n\nScopesDescriptor\n\n\nMetadata service for describing all scopes used in the current service\n\n\n\n\n\n\nServiceDescriptors\n\n\nMetadata service for describing all service handlers\n\n\n\n\n\n\nAuthentication\n\n\nDefault authentication service\n\n\n\n\n\n\nLogger\n\n\nDefault logger\n\n\n\n\n\n\nProvider\n\n\nDefault provider (do not use it directly - Use ProviderFactory instead)\n\n\n\n\n\n\nEventBusAdapter\n\n\nEvent bus adapter\n\n\n\n\n\n\nActionBusAdapter\n\n\nAction bus adapter\n\n\n\n\n\n\nDomain\n\n\nCurrent domain definition\n\n\n\n\n\n\nApplication\n\n\nCurrent application context\n\n\n\n\n\n\nServerAdapter\n\n\nCurrent server adapter (default express adapter)\n\n\n\n\n\n\nProviderFactory\n\n\nService to use for creating providers\n\n\n\n\n\n\nTestUser\n\n\nDefault test user in test environment\n\n\n\n\n\n\nRequestContext\n\n\nCurrent request context\n\n\n\n\n\n\nMetrics\n\n\nManage and emit metrics\n\n\n\n\n\n\nApiKeyService\n\n\nService to manage api key",
            "title": "Dependencies injection"
        },
        {
            "location": "/reference/injection/#dependency-injection",
            "text": "Vulcain  provides a simple dependency injection mechanism limited to  constructor parameters injection  It uses annotations to declare dependencies.",
            "title": "Dependency injection"
        },
        {
            "location": "/reference/injection/#declaring-services",
            "text": "You can declare service with the  @Injectable  annotation.  @ Injectable ( LifeTime . Singleton )  export   class   Service1   {}   Injectable  accepts three parameters:     name  required       lifeTime  yes  Service life time can be  Singleton ,  Scoped  or  Transient    service name  false  default to class name    enableInTestOnly  false  Register this service only in test mode (default false)     with  lifeTime     name  Description      Singleton  Only one instance will be created    Transient  A new instance is always created    Scoped  Singleton instance by request scope",
            "title": "Declaring services"
        },
        {
            "location": "/reference/injection/#using-services",
            "text": "As mentioned above, dependency injection only works with constructor with  @Inject  annotation.  export   class   MyClass   { \n     constructor ( @ Inject ( \"Service1\" )   myService :   Service1 )   {}  }   The following rules are applied :   Using  @Inject  is mandatory to specify parameter injection.  You can mix injected parameters with  classic  parameters however injected parameters must be declared first.  When service starts, all services defined in the following folders are automatically registered : api/handlers,\napi/models, api/services and api/commands.  Scoped services are disposed when the request ends. You can provide your own  dispose  method.  All scoped services are initialized with a  requestContext  property.   Service can be created manually using  container.get(\"service-name\") .  Also you can inject service manually with the following container methods :   injectTransient  injectSingleton  and  injectInstance  injectScoped",
            "title": "Using services"
        },
        {
            "location": "/reference/injection/#predefined-services",
            "text": "Vulcain provides predefined services available with standardized names.\nAll predefined service names are defined in a static class named  DefaultServiceNames     name  service      Container  Current container (global) or scoped in requestContext    TenantPolicy  Policy used to resolve TenantPolicy    AuthorizationPolicy  Policy used to check authorization from ScopesDescriptor    TokenService  Service to manage jwt token    ScopesDescriptor  Metadata service for describing all scopes used in the current service    ServiceDescriptors  Metadata service for describing all service handlers    Authentication  Default authentication service    Logger  Default logger    Provider  Default provider (do not use it directly - Use ProviderFactory instead)    EventBusAdapter  Event bus adapter    ActionBusAdapter  Action bus adapter    Domain  Current domain definition    Application  Current application context    ServerAdapter  Current server adapter (default express adapter)    ProviderFactory  Service to use for creating providers    TestUser  Default test user in test environment    RequestContext  Current request context    Metrics  Manage and emit metrics    ApiKeyService  Service to manage api key",
            "title": "Predefined services"
        },
        {
            "location": "/reference/commands/",
            "text": "",
            "title": "Commands"
        },
        {
            "location": "/reference/configurations/",
            "text": "Dynamic configuration properties\n\n\nConfiguration properties often require to be updated at runtime without restarting your services.\n\n\nDynamic properties offers a simple and easy way to update properties on the fly.\n\n\n\n\nThis is inspired by \nNetflix archaius\n.\n\n\n\n\nFeatures\n\n\n\n\nRuntime update. Last values are cached locally.\n\n\nService can be notified when a value changes.\n\n\nProperty values are pulled from a remote server with a configuration source adapter.\n\n\nMany adapters can be used with different protocols (http, consul, file...)\n\n\nProperties can be chained, providing a value to a hierachical chain of values.\n\n\nProperties can be encrypted and decrypted locally inside a service.\n\n\n\n\nConcepts\n\n\nAll properties are managed by a \nDynamicConfiguration\n singleton object.\nThis is the unique entry point to all dynamic properties and exposes different static methods for creating, listening and initializing properties.\n\n\nProperty values are updated with \nConfigurationSource\n object pulling data at specific time interval.\n\n\n\n\nInfo\n\n\nPolling configurations are set in index.ts. Application starts only after first polling completes successfully.\n\n\n\n\nThere are two kind of properties :\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nService specific\n\n\nVisible only by a specific Service\n\n\n\n\n\n\nShared\n\n\nVisible by all services\n\n\n\n\n\n\n\n\nDeclaring a dynamic property\n\n\nVulcain\n provides helpers to create dynamic properties.\n\n\nTo create a shared property:\n\n\nlet\n \nproperty1\n \n=\n \nSystem\n.\ncreateSharedConfigurationProperty\n<\nstring\n>\n(\n\"property-name\"\n,\n \n\"default value\"\n);\n\n\n\n\n\n\nTo create a service property:\n\n\nlet\n \nproperty1\n \n=\n \nSystem\n.\ncreateServiceConfigurationProperty\n<\nnumber\n>\n(\n\"property-name\"\n,\n \n0\n);\n\n\n\n\n\n\nThese helpers create a \nchained\n property. Chained property create a pipeline of dynamic properties using the first value\navailable.\n\n\nFor example for a service property, the pipeline consists of the following property names :\n\n\n\n\nservice name + service version + property name\n\n\nservice name + property name\n\n\nproperty name (= shared property)\n\n\ndefault value\n\n\nEnvironment variable (as property name in uppercase and all '.' replaced by '_')\n\n\n\n\n\n\nInfo\n\n\nYou can create your own chained property with \nDynamicConfiguration.asChainedProperty<string>()\n.\n\n\n\n\nUsing a dynamic property\n\n\nYou can get a property value through its \nvalue\n property.\n\n\nlet\n \nvalue\n \n=\n \nproperty1\n.\nvalue\n;\n\n\n\n\n\n\nYou can subscribe to a specific property value change with \nproperty1.propertyChanged.subscribe( fn )\n.\n\n\n\n\nInfo\n\n\nDynamic property can not be updated from a service, you can only override the local default value, no update\nwill be sent to sources.\n\n\n\n\nProviding values with configuration source\n\n\nBy default, service template uses a vulcain configuration source only valid within vulcain environment.\n\n\nBut you can create a custom \nHttpConfigurationSource\n reading properties for a specific url.",
            "title": "Configurations"
        },
        {
            "location": "/reference/configurations/#dynamic-configuration-properties",
            "text": "Configuration properties often require to be updated at runtime without restarting your services.  Dynamic properties offers a simple and easy way to update properties on the fly.   This is inspired by  Netflix archaius .",
            "title": "Dynamic configuration properties"
        },
        {
            "location": "/reference/configurations/#features",
            "text": "Runtime update. Last values are cached locally.  Service can be notified when a value changes.  Property values are pulled from a remote server with a configuration source adapter.  Many adapters can be used with different protocols (http, consul, file...)  Properties can be chained, providing a value to a hierachical chain of values.  Properties can be encrypted and decrypted locally inside a service.",
            "title": "Features"
        },
        {
            "location": "/reference/configurations/#concepts",
            "text": "All properties are managed by a  DynamicConfiguration  singleton object.\nThis is the unique entry point to all dynamic properties and exposes different static methods for creating, listening and initializing properties.  Property values are updated with  ConfigurationSource  object pulling data at specific time interval.   Info  Polling configurations are set in index.ts. Application starts only after first polling completes successfully.   There are two kind of properties :     Type  Description      Service specific  Visible only by a specific Service    Shared  Visible by all services",
            "title": "Concepts"
        },
        {
            "location": "/reference/configurations/#declaring-a-dynamic-property",
            "text": "Vulcain  provides helpers to create dynamic properties.  To create a shared property:  let   property1   =   System . createSharedConfigurationProperty < string > ( \"property-name\" ,   \"default value\" );   To create a service property:  let   property1   =   System . createServiceConfigurationProperty < number > ( \"property-name\" ,   0 );   These helpers create a  chained  property. Chained property create a pipeline of dynamic properties using the first value\navailable.  For example for a service property, the pipeline consists of the following property names :   service name + service version + property name  service name + property name  property name (= shared property)  default value  Environment variable (as property name in uppercase and all '.' replaced by '_')    Info  You can create your own chained property with  DynamicConfiguration.asChainedProperty<string>() .",
            "title": "Declaring a dynamic property"
        },
        {
            "location": "/reference/configurations/#using-a-dynamic-property",
            "text": "You can get a property value through its  value  property.  let   value   =   property1 . value ;   You can subscribe to a specific property value change with  property1.propertyChanged.subscribe( fn ) .   Info  Dynamic property can not be updated from a service, you can only override the local default value, no update\nwill be sent to sources.",
            "title": "Using a dynamic property"
        },
        {
            "location": "/reference/configurations/#providing-values-with-configuration-source",
            "text": "By default, service template uses a vulcain configuration source only valid within vulcain environment.  But you can create a custom  HttpConfigurationSource  reading properties for a specific url.",
            "title": "Providing values with configuration source"
        },
        {
            "location": "/reference/metrics/",
            "text": "",
            "title": "Monitoring"
        },
        {
            "location": "/reference/security/",
            "text": "",
            "title": "Security"
        },
        {
            "location": "/about/license/",
            "text": "License\n\n\n                             Apache License\n                       Version 2.0, January 2004\n                    http://www.apache.org/licenses/\n\n\n\n\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n\n\n\n\n\nDefinitions.\n\n\n\"License\" shall mean the terms and conditions for use, reproduction,\n  and distribution as defined by Sections 1 through 9 of this document.\n\n\n\"Licensor\" shall mean the copyright owner or entity authorized by\n  the copyright owner that is granting the License.\n\n\n\"Legal Entity\" shall mean the union of the acting entity and all\n  other entities that control, are controlled by, or are under common\n  control with that entity. For the purposes of this definition,\n  \"control\" means (i) the power, direct or indirect, to cause the\n  direction or management of such entity, whether by contract or\n  otherwise, or (ii) ownership of fifty percent (50%) or more of the\n  outstanding shares, or (iii) beneficial ownership of such entity.\n\n\n\"You\" (or \"Your\") shall mean an individual or Legal Entity\n  exercising permissions granted by this License.\n\n\n\"Source\" form shall mean the preferred form for making modifications,\n  including but not limited to software source code, documentation\n  source, and configuration files.\n\n\n\"Object\" form shall mean any form resulting from mechanical\n  transformation or translation of a Source form, including but\n  not limited to compiled object code, generated documentation,\n  and conversions to other media types.\n\n\n\"Work\" shall mean the work of authorship, whether in Source or\n  Object form, made available under the License, as indicated by a\n  copyright notice that is included in or attached to the work\n  (an example is provided in the Appendix below).\n\n\n\"Derivative Works\" shall mean any work, whether in Source or Object\n  form, that is based on (or derived from) the Work and for which the\n  editorial revisions, annotations, elaborations, or other modifications\n  represent, as a whole, an original work of authorship. For the purposes\n  of this License, Derivative Works shall not include works that remain\n  separable from, or merely link (or bind by name) to the interfaces of,\n  the Work and Derivative Works thereof.\n\n\n\"Contribution\" shall mean any work of authorship, including\n  the original version of the Work and any modifications or additions\n  to that Work or Derivative Works thereof, that is intentionally\n  submitted to Licensor for inclusion in the Work by the copyright owner\n  or by an individual or Legal Entity authorized to submit on behalf of\n  the copyright owner. For the purposes of this definition, \"submitted\"\n  means any form of electronic, verbal, or written communication sent\n  to the Licensor or its representatives, including but not limited to\n  communication on electronic mailing lists, source code control systems,\n  and issue tracking systems that are managed by, or on behalf of, the\n  Licensor for the purpose of discussing and improving the Work, but\n  excluding communication that is conspicuously marked or otherwise\n  designated in writing by the copyright owner as \"Not a Contribution.\"\n\n\n\"Contributor\" shall mean Licensor and any individual or Legal Entity\n  on behalf of whom a Contribution has been received by Licensor and\n  subsequently incorporated within the Work.\n\n\n\n\n\n\nGrant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n\n\n\n\n\nGrant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n\n\n\n\n\nRedistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n\n(a) You must give any other recipients of the Work or\n      Derivative Works a copy of this License; and\n\n\n(b) You must cause any modified files to carry prominent notices\n      stating that You changed the files; and\n\n\n(c) You must retain, in the Source form of any Derivative Works\n      that You distribute, all copyright, patent, trademark, and\n      attribution notices from the Source form of the Work,\n      excluding those notices that do not pertain to any part of\n      the Derivative Works; and\n\n\n(d) If the Work includes a \"NOTICE\" text file as part of its\n      distribution, then any Derivative Works that You distribute must\n      include a readable copy of the attribution notices contained\n      within such NOTICE file, excluding those notices that do not\n      pertain to any part of the Derivative Works, in at least one\n      of the following places: within a NOTICE text file distributed\n      as part of the Derivative Works; within the Source form or\n      documentation, if provided along with the Derivative Works; or,\n      within a display generated by the Derivative Works, if and\n      wherever such third-party notices normally appear. The contents\n      of the NOTICE file are for informational purposes only and\n      do not modify the License. You may add Your own attribution\n      notices within Derivative Works that You distribute, alongside\n      or as an addendum to the NOTICE text from the Work, provided\n      that such additional attribution notices cannot be construed\n      as modifying the License.\n\n\nYou may add Your own copyright statement to Your modifications and\n  may provide additional or different license terms and conditions\n  for use, reproduction, or distribution of Your modifications, or\n  for any such Derivative Works as a whole, provided Your use,\n  reproduction, and distribution of the Work otherwise complies with\n  the conditions stated in this License.\n\n\n\n\n\n\nSubmission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n\n\n\n\n\nTrademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n\n\n\n\n\nDisclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n\n\n\n\n\nLimitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n\n\n\n\n\nAccepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n\n\n\n\n\nEND OF TERMS AND CONDITIONS\n\n\nAPPENDIX: How to apply the Apache License to your work.\n\n\n  To apply the Apache License to your work, attach the following\n  boilerplate notice, with the fields enclosed by brackets \"{}\"\n  replaced with your own identifying information. (Don't include\n  the brackets!)  The text should be enclosed in the appropriate\n  comment syntax for the file format. We also recommend that a\n  file or class name and description of purpose be included on the\n  same \"printed page\" as the copyright notice for easier\n  identification within third-party archives.\n\n\n\n\n\nCopyright {yyyy} {name of copyright owner}\n\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\n\n\n\n\nUnless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.",
            "title": "license"
        },
        {
            "location": "/about/license/#license",
            "text": "Apache License\n                       Version 2.0, January 2004\n                    http://www.apache.org/licenses/  TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION    Definitions.  \"License\" shall mean the terms and conditions for use, reproduction,\n  and distribution as defined by Sections 1 through 9 of this document.  \"Licensor\" shall mean the copyright owner or entity authorized by\n  the copyright owner that is granting the License.  \"Legal Entity\" shall mean the union of the acting entity and all\n  other entities that control, are controlled by, or are under common\n  control with that entity. For the purposes of this definition,\n  \"control\" means (i) the power, direct or indirect, to cause the\n  direction or management of such entity, whether by contract or\n  otherwise, or (ii) ownership of fifty percent (50%) or more of the\n  outstanding shares, or (iii) beneficial ownership of such entity.  \"You\" (or \"Your\") shall mean an individual or Legal Entity\n  exercising permissions granted by this License.  \"Source\" form shall mean the preferred form for making modifications,\n  including but not limited to software source code, documentation\n  source, and configuration files.  \"Object\" form shall mean any form resulting from mechanical\n  transformation or translation of a Source form, including but\n  not limited to compiled object code, generated documentation,\n  and conversions to other media types.  \"Work\" shall mean the work of authorship, whether in Source or\n  Object form, made available under the License, as indicated by a\n  copyright notice that is included in or attached to the work\n  (an example is provided in the Appendix below).  \"Derivative Works\" shall mean any work, whether in Source or Object\n  form, that is based on (or derived from) the Work and for which the\n  editorial revisions, annotations, elaborations, or other modifications\n  represent, as a whole, an original work of authorship. For the purposes\n  of this License, Derivative Works shall not include works that remain\n  separable from, or merely link (or bind by name) to the interfaces of,\n  the Work and Derivative Works thereof.  \"Contribution\" shall mean any work of authorship, including\n  the original version of the Work and any modifications or additions\n  to that Work or Derivative Works thereof, that is intentionally\n  submitted to Licensor for inclusion in the Work by the copyright owner\n  or by an individual or Legal Entity authorized to submit on behalf of\n  the copyright owner. For the purposes of this definition, \"submitted\"\n  means any form of electronic, verbal, or written communication sent\n  to the Licensor or its representatives, including but not limited to\n  communication on electronic mailing lists, source code control systems,\n  and issue tracking systems that are managed by, or on behalf of, the\n  Licensor for the purpose of discussing and improving the Work, but\n  excluding communication that is conspicuously marked or otherwise\n  designated in writing by the copyright owner as \"Not a Contribution.\"  \"Contributor\" shall mean Licensor and any individual or Legal Entity\n  on behalf of whom a Contribution has been received by Licensor and\n  subsequently incorporated within the Work.    Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.    Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.    Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:  (a) You must give any other recipients of the Work or\n      Derivative Works a copy of this License; and  (b) You must cause any modified files to carry prominent notices\n      stating that You changed the files; and  (c) You must retain, in the Source form of any Derivative Works\n      that You distribute, all copyright, patent, trademark, and\n      attribution notices from the Source form of the Work,\n      excluding those notices that do not pertain to any part of\n      the Derivative Works; and  (d) If the Work includes a \"NOTICE\" text file as part of its\n      distribution, then any Derivative Works that You distribute must\n      include a readable copy of the attribution notices contained\n      within such NOTICE file, excluding those notices that do not\n      pertain to any part of the Derivative Works, in at least one\n      of the following places: within a NOTICE text file distributed\n      as part of the Derivative Works; within the Source form or\n      documentation, if provided along with the Derivative Works; or,\n      within a display generated by the Derivative Works, if and\n      wherever such third-party notices normally appear. The contents\n      of the NOTICE file are for informational purposes only and\n      do not modify the License. You may add Your own attribution\n      notices within Derivative Works that You distribute, alongside\n      or as an addendum to the NOTICE text from the Work, provided\n      that such additional attribution notices cannot be construed\n      as modifying the License.  You may add Your own copyright statement to Your modifications and\n  may provide additional or different license terms and conditions\n  for use, reproduction, or distribution of Your modifications, or\n  for any such Derivative Works as a whole, provided Your use,\n  reproduction, and distribution of the Work otherwise complies with\n  the conditions stated in this License.    Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.    Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.    Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.    Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.    Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.    END OF TERMS AND CONDITIONS  APPENDIX: How to apply the Apache License to your work.    To apply the Apache License to your work, attach the following\n  boilerplate notice, with the fields enclosed by brackets \"{}\"\n  replaced with your own identifying information. (Don't include\n  the brackets!)  The text should be enclosed in the appropriate\n  comment syntax for the file format. We also recommend that a\n  file or class name and description of purpose be included on the\n  same \"printed page\" as the copyright notice for easier\n  identification within third-party archives.  Copyright {yyyy} {name of copyright owner}  Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at     http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.",
            "title": "License"
        }
    ]
}