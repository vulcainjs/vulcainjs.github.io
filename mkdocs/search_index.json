{
    "docs": [
        {
            "location": "/",
            "text": "Open-Source Microservice Framework for nodejs (Preview)\n\n        \n\n    \n\n    \n\n        \n\n            \nDownload\n\n        \n\n        \n\n            \nView On GitHub\n\n        \n\n    \n\n\n\n\n\n\n    \n\n        \nFeatures\n\n        \n\n            \n\n            \nFully docker deployable\n\n            \nHystrix command implementation (circuit-breaker, bulkhead, timeout)\n\n            \nContext propagation (user context, correlation id...)\n            \nCQRS implementation\n\n            \nFully extensible whith adapters\n\n            \nInput data validation\n\n            \nDefault implementation (MongoDb, rabbitmq, statsd, swarm)\n\n            \nAuthoring tool (Creating project from template, code generation...)\n\n            \nMetrics generation\n\n            \n\n        \n\n    \n\n    \n\n        \nEnterprise ready\n\n        \n\n            \n\n            \nDynamic configuration properties\n\n            \nService versionning\n\n            \nFeature teams and domains\n\n            \nEnvironment management\n\n            \nBuilt-in metadata service description (entry points description, service dependencies)\n\n            \nLog obfuscation for sensible data\n\n            \nUser interface management for teams\n\n            \nAutomatic metrics generation\n\n            \nMulti-tenants\n\n            \nDistributed request log aggregation with correlation-id\n\n            \n\n        \n\n    \n\n    \n\n        \nVideo overview",
            "title": "Home"
        },
        {
            "location": "/gettingStarted/",
            "text": "Getting started\n\n\nPrerequisites\n\n\n\n\nnode 6.0 see \nthis link\n to install node on your machine.\n\n\ndocker version > 1.12. See \nthis link\n to install docker.\n\n\nvulcain-cli\n is not mandatory but can help you to start easily whith \nvulcain\n. Install it with\n\n\n\n\nnpm install vulcain-cli -g\n\n\n\n\n\nInstalling a demo vulcain environment ?\n\n\n\n\nCreate a virtual machine with docker-machine\n\n\n\n\ndocker-machine create -d virtualbox --virtualbox-memory \n2048\n vulcain\n\n\n\n\n\n\n\nNote\n\n\nMachine must have at least 2gb of memory for running elasticsearch\n\n\n\n\n\n\nInstall vulcain-cli like any global npm package with the following command :\n\n\n\n\nnpm install -g vulcain-cli\n\n\n\n\n\n\n\nWarning\n\n\nYou may need sudo to run this command.\n\n\n\n\n\n\nClone the demo scripts repo\n\n\n\n\ngit clone https://github.com/vulcainjs/vulcain-demo.git vulcain-demo\n\n\n\n\n\n\n\nAnd run the initialisation script with\n\n\n\n\ncd\n vulcain-demo\n./install-demo.sh\n\n\n\n\n\n\n\nSuccess\n\n\nYou have now a fully operationnel vulcain environment.\n\n\nVulcain ui is available on \nhttp://$(docker-machine ip vulcain):8080\n with admin/vulcain.\n\n\n\n\nCreate your first microservice\n\n\n\n\nNote\n\n\nThe following commands must be run in the service's root folder and docker context initialized to connect\nto vulcain machine. (This is the case if you have run the install-demo script)\n\n\n\n\nvulcain create service1\n\n\n\n\n\nThis command creates a microservice using a default project template which consists as a fully functional\ncustomer service providing CRUD handlers.\n\n\n\n\nTip\n\n\nFor this demo, all handlers (query and actions) are in the same service but it's a best practice to\ndispatch handlers on separate services.\n\n\n\n\nYou can edit the code or publish it directly with\n\n\nvulcain publish \n1\n\n\n\n\n\n\nwhere 1 is a version number, you must increment it every time you'll publish a new version.\n\n\n\n\nInfo\n\n\nVulcain template are predefined for using with \nvscode\n or \nwebstorm\n.\n\n\nThe starter template contains a fullly founctional micro-service for managing a simple \nCustomer\n. By default, the\nmicroservice uses a very basic in-memory provider persisting on disk for testing.",
            "title": "Run sample"
        },
        {
            "location": "/gettingStarted/#getting-started",
            "text": "",
            "title": "Getting started"
        },
        {
            "location": "/gettingStarted/#prerequisites",
            "text": "node 6.0 see  this link  to install node on your machine.  docker version > 1.12. See  this link  to install docker.  vulcain-cli  is not mandatory but can help you to start easily whith  vulcain . Install it with   npm install vulcain-cli -g",
            "title": "Prerequisites"
        },
        {
            "location": "/gettingStarted/#installing-a-demo-vulcain-environment",
            "text": "Create a virtual machine with docker-machine   docker-machine create -d virtualbox --virtualbox-memory  2048  vulcain   Note  Machine must have at least 2gb of memory for running elasticsearch    Install vulcain-cli like any global npm package with the following command :   npm install -g vulcain-cli   Warning  You may need sudo to run this command.    Clone the demo scripts repo   git clone https://github.com/vulcainjs/vulcain-demo.git vulcain-demo   And run the initialisation script with   cd  vulcain-demo\n./install-demo.sh   Success  You have now a fully operationnel vulcain environment.  Vulcain ui is available on  http://$(docker-machine ip vulcain):8080  with admin/vulcain.",
            "title": "Installing a demo vulcain environment ?"
        },
        {
            "location": "/gettingStarted/#create-your-first-microservice",
            "text": "Note  The following commands must be run in the service's root folder and docker context initialized to connect\nto vulcain machine. (This is the case if you have run the install-demo script)   vulcain create service1  This command creates a microservice using a default project template which consists as a fully functional\ncustomer service providing CRUD handlers.   Tip  For this demo, all handlers (query and actions) are in the same service but it's a best practice to\ndispatch handlers on separate services.   You can edit the code or publish it directly with  vulcain publish  1   where 1 is a version number, you must increment it every time you'll publish a new version.   Info  Vulcain template are predefined for using with  vscode  or  webstorm .  The starter template contains a fullly founctional micro-service for managing a simple  Customer . By default, the\nmicroservice uses a very basic in-memory provider persisting on disk for testing.",
            "title": "Create your first microservice"
        },
        {
            "location": "/reference/",
            "text": "Documentation\n\n\nDocumentation is in progress",
            "title": "Overview"
        },
        {
            "location": "/reference/#documentation",
            "text": "Documentation is in progress",
            "title": "Documentation"
        },
        {
            "location": "/reference/actions/",
            "text": "",
            "title": "Actions"
        },
        {
            "location": "/reference/query/",
            "text": "",
            "title": "Queries"
        },
        {
            "location": "/reference/event/",
            "text": "",
            "title": "Events"
        },
        {
            "location": "/reference/domain/",
            "text": "Domain model\n\n\nAll services belong to a domain like \nCustomer\n or \nBilling\n. Domain name is defined in every startup file and\nit's available as a standard service (see \nstandard services\n)\n\n\nServices use \ndomain model\n, or \nSchema\n in vulcain context, to validate input data.\n\n\nSchemas\n are defined with annotations. Only well defined schema properties will be taken into account when requesting a handler.\n\n\nDefine a schema is really easy.\n\n\n@Model\n()\n\n\nexport\n \nclass\n \nCustomer\n \n{\n\n    \n@Property\n({\n \ntype\n:\n \n\"string\"\n,\n \nrequired\n: \ntrue\n \n})\n\n    \n@Validator\n(\n\"length\"\n,\n \n{\n \nmin\n: \n5\n \n})\n\n    \nfirstName\n: \nstring\n;\n\n    \n@Property\n({\n \ntype\n:\n \n\"string\"\n,\n \nrequired\n: \ntrue\n,\n \nunique\n: \ntrue\n,\n \nisKey\n: \ntrue\n \n})\n\n    \nlastName\n: \nstring\n;\n\n\n}\n\n\n\n\n\n\nThis code define \nCustomer\n model with 2 required properties.\n\n\nfirstName\n has a length validation and \nlastName\n provides some specific informations for the\ndefault provider implementation.",
            "title": "Domain models"
        },
        {
            "location": "/reference/domain/#domain-model",
            "text": "All services belong to a domain like  Customer  or  Billing . Domain name is defined in every startup file and\nit's available as a standard service (see  standard services )  Services use  domain model , or  Schema  in vulcain context, to validate input data.  Schemas  are defined with annotations. Only well defined schema properties will be taken into account when requesting a handler.  Define a schema is really easy.  @Model ()  export   class   Customer   { \n     @Property ({   type :   \"string\" ,   required :  true   }) \n     @Validator ( \"length\" ,   {   min :  5   }) \n     firstName :  string ; \n     @Property ({   type :   \"string\" ,   required :  true ,   unique :  true ,   isKey :  true   }) \n     lastName :  string ;  }   This code define  Customer  model with 2 required properties.  firstName  has a length validation and  lastName  provides some specific informations for the\ndefault provider implementation.",
            "title": "Domain model"
        },
        {
            "location": "/reference/injection/",
            "text": "Dependency injection\n\n\nVulcain\n provides a minimalist dependency injection mechanism limited to \nconstructor parameters injection\n\n\nIt uses annotations to declare dependencies.\n\n\nDeclaring services\n\n\nYou can declare service with the \n@Injectable\n annotation.\n\n\n@\nInjectable\n(\nLifeTime\n.\nSingleton\n)\n\n\nexport\n \nclass\n \nService1\n \n{}\n\n\n\n\n\n\nInjectable\n accepts three parameters:\n\n\n\n\n\n\n\n\nname\n\n\nrequired\n\n\n\n\n\n\n\n\n\n\n\n\nlifeTime\n\n\nyes\n\n\nService life time can be \nSingleton\n, \nScoped\n or \nTransient\n\n\n\n\n\n\nservice name\n\n\nfalse\n\n\ndefault to class name\n\n\n\n\n\n\nenableInTestOnly\n\n\nfalse\n\n\nRegister this service only in test mode (default false)\n\n\n\n\n\n\n\n\nwith \nlifeTime\n\n\n\n\n\n\n\n\nname\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSingleton\n\n\nOnly one instance will be created\n\n\n\n\n\n\nTransient\n\n\nA new instance is always created\n\n\n\n\n\n\nScoped\n\n\nSingleton instance by request scope\n\n\n\n\n\n\n\n\nUsing services\n\n\nAs already saw, dependency injection only works within constructor with \n@Inject\n annotation.\n\n\nexport\n \nclass\n \nMyClass\n \n{\n\n    \nconstructor\n(\n@\nInject\n(\n\"Service1\"\n)\n \nmyService\n:\n \nService1\n)\n \n{}\n\n\n}\n\n\n\n\n\n\nThe following rules are used :\n\n\n\n\nUsing \n@Inject\n is mandatory to specify parameter injection.\n\n\nYou can mix injected parameter with \nclassic\n parameter but injected parameters must be declared first.\n\n\nWhen service start, all services defined in the following folders are automatically registered : api/handlers,\napi/models, api/services and api/commands.\n\n\nScoped services are disposed when the request ends. You can provide your own \ndispose\n method.\n\n\nAll scoped services are initialized with a \nrequestContext\n property.\n\n\n\n\nService can be created manually using \ncontainer.get(\"service-name\")\n.\n\n\nAlso you can inject service manually with the following container methods :\n\n\n\n\ninjectTransient\n\n\ninjectSingleton\n and \ninjectInstance\n\n\ninjectScoped\n\n\n\n\nPredefined services\n\n\nVulcain provides predefined services availables with standardized names.\nAll predefined service names are defined in a static class named \nDefaultServiceNames\n\n\n\n\n\n\n\n\nname\n\n\nservice\n\n\n\n\n\n\n\n\n\n\nContainer\n\n\nCurrent container (global) or scoped in requestContext\n\n\n\n\n\n\nTenantPolicy\n\n\nPolicy used to resolve TenantPolicy\n\n\n\n\n\n\nAuthorizationPolicy\n\n\nPolicy used to check authorization from ScopesDescriptor\n\n\n\n\n\n\nTokenService\n\n\nService to manage jwt token\n\n\n\n\n\n\nScopesDescriptor\n\n\nMetadata service for describing all scopes used in the current service\n\n\n\n\n\n\nServiceDescriptors\n\n\nMetadata service for describing all service handlers\n\n\n\n\n\n\nAuthentication\n\n\nDefault authentication service\n\n\n\n\n\n\nLogger\n\n\nDefault logger\n\n\n\n\n\n\nProvider\n\n\nDefault provider (do not use it directly - Use ProviderFactory instead)\n\n\n\n\n\n\nEventBusAdapter\n\n\nEvent bus adapter\n\n\n\n\n\n\nActionBusAdapter\n\n\nAction bus adapter\n\n\n\n\n\n\nDomain\n\n\nCurrent domain definition\n\n\n\n\n\n\nApplication\n\n\nCurrent application context\n\n\n\n\n\n\nServerAdapter\n\n\nCurrent server adapter (default express adapter)\n\n\n\n\n\n\nProviderFactory\n\n\nService to use for creating provider\n\n\n\n\n\n\nTestUser\n\n\nDefault test user in test environnement\n\n\n\n\n\n\nRequestContext\n\n\nCurrent request context\n\n\n\n\n\n\nMetrics\n\n\nManage and emit metrics\n\n\n\n\n\n\nApiKeyService\n\n\nService to manage api key",
            "title": "Dependencies injection"
        },
        {
            "location": "/reference/injection/#dependency-injection",
            "text": "Vulcain  provides a minimalist dependency injection mechanism limited to  constructor parameters injection  It uses annotations to declare dependencies.",
            "title": "Dependency injection"
        },
        {
            "location": "/reference/injection/#declaring-services",
            "text": "You can declare service with the  @Injectable  annotation.  @ Injectable ( LifeTime . Singleton )  export   class   Service1   {}   Injectable  accepts three parameters:     name  required       lifeTime  yes  Service life time can be  Singleton ,  Scoped  or  Transient    service name  false  default to class name    enableInTestOnly  false  Register this service only in test mode (default false)     with  lifeTime     name  Description      Singleton  Only one instance will be created    Transient  A new instance is always created    Scoped  Singleton instance by request scope",
            "title": "Declaring services"
        },
        {
            "location": "/reference/injection/#using-services",
            "text": "As already saw, dependency injection only works within constructor with  @Inject  annotation.  export   class   MyClass   { \n     constructor ( @ Inject ( \"Service1\" )   myService :   Service1 )   {}  }   The following rules are used :   Using  @Inject  is mandatory to specify parameter injection.  You can mix injected parameter with  classic  parameter but injected parameters must be declared first.  When service start, all services defined in the following folders are automatically registered : api/handlers,\napi/models, api/services and api/commands.  Scoped services are disposed when the request ends. You can provide your own  dispose  method.  All scoped services are initialized with a  requestContext  property.   Service can be created manually using  container.get(\"service-name\") .  Also you can inject service manually with the following container methods :   injectTransient  injectSingleton  and  injectInstance  injectScoped",
            "title": "Using services"
        },
        {
            "location": "/reference/injection/#predefined-services",
            "text": "Vulcain provides predefined services availables with standardized names.\nAll predefined service names are defined in a static class named  DefaultServiceNames     name  service      Container  Current container (global) or scoped in requestContext    TenantPolicy  Policy used to resolve TenantPolicy    AuthorizationPolicy  Policy used to check authorization from ScopesDescriptor    TokenService  Service to manage jwt token    ScopesDescriptor  Metadata service for describing all scopes used in the current service    ServiceDescriptors  Metadata service for describing all service handlers    Authentication  Default authentication service    Logger  Default logger    Provider  Default provider (do not use it directly - Use ProviderFactory instead)    EventBusAdapter  Event bus adapter    ActionBusAdapter  Action bus adapter    Domain  Current domain definition    Application  Current application context    ServerAdapter  Current server adapter (default express adapter)    ProviderFactory  Service to use for creating provider    TestUser  Default test user in test environnement    RequestContext  Current request context    Metrics  Manage and emit metrics    ApiKeyService  Service to manage api key",
            "title": "Predefined services"
        },
        {
            "location": "/reference/commands/",
            "text": "",
            "title": "Commands"
        },
        {
            "location": "/reference/configurations/",
            "text": "Dynamic configuration properties\n\n\nConfiguration properties often need to be update during runtime without restarting your service.\n\n\nDynamic properties offers a simple and easy way to update properties on the fly.\n\n\n\n\nThis is inspired by \nNetflix archaius\n.\n\n\n\n\nFeatures\n\n\n\n\nRuntime update. Last values are caching locally.\n\n\nService can be notified when a value changes.\n\n\nProperty values are pulling from remote server with configuration source adapter.\n\n\nMany adapters can be used with different protocols (http, consul, file...)\n\n\nProperties can be chained, providing a value from a hierachic chain of value.\n\n\nProperties can be encrypted and decrypted locally inside service.\n\n\n\n\nConcepts\n\n\nAll properties are managed by a \nDynamicConfiguration\n object instanciated as a singleton.\nThis is the unique entry point to all dynamic properties and exposes different static methods for creating, listening and initializing properties.\n\n\nProperty values are updated with \nConfigurationSource\n object pulling data at specific interval.\n\n\n\n\nInfo\n\n\nPolling configurations are set in index.ts. Application starts only after first polling completes successfully.\n\n\n\n\nThere are two kind of properties :\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nService specific\n\n\nVisible only from a specific Service\n\n\n\n\n\n\nShared\n\n\nVisible by all services\n\n\n\n\n\n\n\n\nDeclaring a dynamic property\n\n\nVulcain\n provides helpers to create property.\n\n\nTo create a shared property:\n\n\nlet\n \nproperty1\n \n=\n \nSystem\n.\ncreateSharedConfigurationProperty\n<\nstring\n>\n(\n\"property-name\"\n,\n \n\"default value\"\n);\n\n\n\n\n\n\nTo create a service property:\n\n\nlet\n \nproperty1\n \n=\n \nSystem\n.\ncreateServiceConfigurationProperty\n<\nnumber\n>\n(\n\"property-name\"\n,\n \n0\n);\n\n\n\n\n\n\nThese helpers create a \nchained\n property. Chained property create a pipeline of dynamic property using the first value\navailable.\n\n\nFor example for a service property, the pipeline consists of the following property names :\n\n\n\n\nservice name + service version + property name\n\n\nservice name + property name\n\n\nproperty name (= shared property)\n\n\ndefault value\n\n\nEnvironment variable (as property name in uppercase and all '.' replaced by '_')\n\n\n\n\n\n\nInfo\n\n\nYou can create your own chained property with \nDynamicConfiguration.asChainedProperty<string>()\n.\n\n\n\n\nUsing a dynamic property\n\n\nYou can get property value with its \nvalue\n property.\n\n\nlet\n \nvalue\n \n=\n \nproperty1\n.\nvalue\n;\n\n\n\n\n\n\nYou can subscribe on a specific property value changed with \nproperty1.propertyChanged.subscribe( fn )\n.\n\n\n\n\nInfo\n\n\nDynamic property can not be updated from a service, you can only override the local default value, no update\nwill be send to sources.\n\n\n\n\nProviding values with configuration source\n\n\nBy default, service template uses a vulcain configuration source valid only within vulcain environement.\n\n\nBut you can create a custom \nHttpConfigurationSource\n reading properties for a specific url.",
            "title": "Configurations"
        },
        {
            "location": "/reference/configurations/#dynamic-configuration-properties",
            "text": "Configuration properties often need to be update during runtime without restarting your service.  Dynamic properties offers a simple and easy way to update properties on the fly.   This is inspired by  Netflix archaius .",
            "title": "Dynamic configuration properties"
        },
        {
            "location": "/reference/configurations/#features",
            "text": "Runtime update. Last values are caching locally.  Service can be notified when a value changes.  Property values are pulling from remote server with configuration source adapter.  Many adapters can be used with different protocols (http, consul, file...)  Properties can be chained, providing a value from a hierachic chain of value.  Properties can be encrypted and decrypted locally inside service.",
            "title": "Features"
        },
        {
            "location": "/reference/configurations/#concepts",
            "text": "All properties are managed by a  DynamicConfiguration  object instanciated as a singleton.\nThis is the unique entry point to all dynamic properties and exposes different static methods for creating, listening and initializing properties.  Property values are updated with  ConfigurationSource  object pulling data at specific interval.   Info  Polling configurations are set in index.ts. Application starts only after first polling completes successfully.   There are two kind of properties :     Type  Description      Service specific  Visible only from a specific Service    Shared  Visible by all services",
            "title": "Concepts"
        },
        {
            "location": "/reference/configurations/#declaring-a-dynamic-property",
            "text": "Vulcain  provides helpers to create property.  To create a shared property:  let   property1   =   System . createSharedConfigurationProperty < string > ( \"property-name\" ,   \"default value\" );   To create a service property:  let   property1   =   System . createServiceConfigurationProperty < number > ( \"property-name\" ,   0 );   These helpers create a  chained  property. Chained property create a pipeline of dynamic property using the first value\navailable.  For example for a service property, the pipeline consists of the following property names :   service name + service version + property name  service name + property name  property name (= shared property)  default value  Environment variable (as property name in uppercase and all '.' replaced by '_')    Info  You can create your own chained property with  DynamicConfiguration.asChainedProperty<string>() .",
            "title": "Declaring a dynamic property"
        },
        {
            "location": "/reference/configurations/#using-a-dynamic-property",
            "text": "You can get property value with its  value  property.  let   value   =   property1 . value ;   You can subscribe on a specific property value changed with  property1.propertyChanged.subscribe( fn ) .   Info  Dynamic property can not be updated from a service, you can only override the local default value, no update\nwill be send to sources.",
            "title": "Using a dynamic property"
        },
        {
            "location": "/reference/configurations/#providing-values-with-configuration-source",
            "text": "By default, service template uses a vulcain configuration source valid only within vulcain environement.  But you can create a custom  HttpConfigurationSource  reading properties for a specific url.",
            "title": "Providing values with configuration source"
        },
        {
            "location": "/reference/metrics/",
            "text": "",
            "title": "Monitoring"
        },
        {
            "location": "/reference/security/",
            "text": "",
            "title": "Security"
        },
        {
            "location": "/about/license/",
            "text": "License\n\n\n                             Apache License\n                       Version 2.0, January 2004\n                    http://www.apache.org/licenses/\n\n\n\n\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n\n\n\n\n\nDefinitions.\n\n\n\"License\" shall mean the terms and conditions for use, reproduction,\n  and distribution as defined by Sections 1 through 9 of this document.\n\n\n\"Licensor\" shall mean the copyright owner or entity authorized by\n  the copyright owner that is granting the License.\n\n\n\"Legal Entity\" shall mean the union of the acting entity and all\n  other entities that control, are controlled by, or are under common\n  control with that entity. For the purposes of this definition,\n  \"control\" means (i) the power, direct or indirect, to cause the\n  direction or management of such entity, whether by contract or\n  otherwise, or (ii) ownership of fifty percent (50%) or more of the\n  outstanding shares, or (iii) beneficial ownership of such entity.\n\n\n\"You\" (or \"Your\") shall mean an individual or Legal Entity\n  exercising permissions granted by this License.\n\n\n\"Source\" form shall mean the preferred form for making modifications,\n  including but not limited to software source code, documentation\n  source, and configuration files.\n\n\n\"Object\" form shall mean any form resulting from mechanical\n  transformation or translation of a Source form, including but\n  not limited to compiled object code, generated documentation,\n  and conversions to other media types.\n\n\n\"Work\" shall mean the work of authorship, whether in Source or\n  Object form, made available under the License, as indicated by a\n  copyright notice that is included in or attached to the work\n  (an example is provided in the Appendix below).\n\n\n\"Derivative Works\" shall mean any work, whether in Source or Object\n  form, that is based on (or derived from) the Work and for which the\n  editorial revisions, annotations, elaborations, or other modifications\n  represent, as a whole, an original work of authorship. For the purposes\n  of this License, Derivative Works shall not include works that remain\n  separable from, or merely link (or bind by name) to the interfaces of,\n  the Work and Derivative Works thereof.\n\n\n\"Contribution\" shall mean any work of authorship, including\n  the original version of the Work and any modifications or additions\n  to that Work or Derivative Works thereof, that is intentionally\n  submitted to Licensor for inclusion in the Work by the copyright owner\n  or by an individual or Legal Entity authorized to submit on behalf of\n  the copyright owner. For the purposes of this definition, \"submitted\"\n  means any form of electronic, verbal, or written communication sent\n  to the Licensor or its representatives, including but not limited to\n  communication on electronic mailing lists, source code control systems,\n  and issue tracking systems that are managed by, or on behalf of, the\n  Licensor for the purpose of discussing and improving the Work, but\n  excluding communication that is conspicuously marked or otherwise\n  designated in writing by the copyright owner as \"Not a Contribution.\"\n\n\n\"Contributor\" shall mean Licensor and any individual or Legal Entity\n  on behalf of whom a Contribution has been received by Licensor and\n  subsequently incorporated within the Work.\n\n\n\n\n\n\nGrant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n\n\n\n\n\nGrant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n\n\n\n\n\nRedistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n\n(a) You must give any other recipients of the Work or\n      Derivative Works a copy of this License; and\n\n\n(b) You must cause any modified files to carry prominent notices\n      stating that You changed the files; and\n\n\n(c) You must retain, in the Source form of any Derivative Works\n      that You distribute, all copyright, patent, trademark, and\n      attribution notices from the Source form of the Work,\n      excluding those notices that do not pertain to any part of\n      the Derivative Works; and\n\n\n(d) If the Work includes a \"NOTICE\" text file as part of its\n      distribution, then any Derivative Works that You distribute must\n      include a readable copy of the attribution notices contained\n      within such NOTICE file, excluding those notices that do not\n      pertain to any part of the Derivative Works, in at least one\n      of the following places: within a NOTICE text file distributed\n      as part of the Derivative Works; within the Source form or\n      documentation, if provided along with the Derivative Works; or,\n      within a display generated by the Derivative Works, if and\n      wherever such third-party notices normally appear. The contents\n      of the NOTICE file are for informational purposes only and\n      do not modify the License. You may add Your own attribution\n      notices within Derivative Works that You distribute, alongside\n      or as an addendum to the NOTICE text from the Work, provided\n      that such additional attribution notices cannot be construed\n      as modifying the License.\n\n\nYou may add Your own copyright statement to Your modifications and\n  may provide additional or different license terms and conditions\n  for use, reproduction, or distribution of Your modifications, or\n  for any such Derivative Works as a whole, provided Your use,\n  reproduction, and distribution of the Work otherwise complies with\n  the conditions stated in this License.\n\n\n\n\n\n\nSubmission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n\n\n\n\n\nTrademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n\n\n\n\n\nDisclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n\n\n\n\n\nLimitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n\n\n\n\n\nAccepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n\n\n\n\n\nEND OF TERMS AND CONDITIONS\n\n\nAPPENDIX: How to apply the Apache License to your work.\n\n\n  To apply the Apache License to your work, attach the following\n  boilerplate notice, with the fields enclosed by brackets \"{}\"\n  replaced with your own identifying information. (Don't include\n  the brackets!)  The text should be enclosed in the appropriate\n  comment syntax for the file format. We also recommend that a\n  file or class name and description of purpose be included on the\n  same \"printed page\" as the copyright notice for easier\n  identification within third-party archives.\n\n\n\n\n\nCopyright {yyyy} {name of copyright owner}\n\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\n\n\n\n\nUnless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.",
            "title": "license"
        },
        {
            "location": "/about/license/#license",
            "text": "Apache License\n                       Version 2.0, January 2004\n                    http://www.apache.org/licenses/  TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION    Definitions.  \"License\" shall mean the terms and conditions for use, reproduction,\n  and distribution as defined by Sections 1 through 9 of this document.  \"Licensor\" shall mean the copyright owner or entity authorized by\n  the copyright owner that is granting the License.  \"Legal Entity\" shall mean the union of the acting entity and all\n  other entities that control, are controlled by, or are under common\n  control with that entity. For the purposes of this definition,\n  \"control\" means (i) the power, direct or indirect, to cause the\n  direction or management of such entity, whether by contract or\n  otherwise, or (ii) ownership of fifty percent (50%) or more of the\n  outstanding shares, or (iii) beneficial ownership of such entity.  \"You\" (or \"Your\") shall mean an individual or Legal Entity\n  exercising permissions granted by this License.  \"Source\" form shall mean the preferred form for making modifications,\n  including but not limited to software source code, documentation\n  source, and configuration files.  \"Object\" form shall mean any form resulting from mechanical\n  transformation or translation of a Source form, including but\n  not limited to compiled object code, generated documentation,\n  and conversions to other media types.  \"Work\" shall mean the work of authorship, whether in Source or\n  Object form, made available under the License, as indicated by a\n  copyright notice that is included in or attached to the work\n  (an example is provided in the Appendix below).  \"Derivative Works\" shall mean any work, whether in Source or Object\n  form, that is based on (or derived from) the Work and for which the\n  editorial revisions, annotations, elaborations, or other modifications\n  represent, as a whole, an original work of authorship. For the purposes\n  of this License, Derivative Works shall not include works that remain\n  separable from, or merely link (or bind by name) to the interfaces of,\n  the Work and Derivative Works thereof.  \"Contribution\" shall mean any work of authorship, including\n  the original version of the Work and any modifications or additions\n  to that Work or Derivative Works thereof, that is intentionally\n  submitted to Licensor for inclusion in the Work by the copyright owner\n  or by an individual or Legal Entity authorized to submit on behalf of\n  the copyright owner. For the purposes of this definition, \"submitted\"\n  means any form of electronic, verbal, or written communication sent\n  to the Licensor or its representatives, including but not limited to\n  communication on electronic mailing lists, source code control systems,\n  and issue tracking systems that are managed by, or on behalf of, the\n  Licensor for the purpose of discussing and improving the Work, but\n  excluding communication that is conspicuously marked or otherwise\n  designated in writing by the copyright owner as \"Not a Contribution.\"  \"Contributor\" shall mean Licensor and any individual or Legal Entity\n  on behalf of whom a Contribution has been received by Licensor and\n  subsequently incorporated within the Work.    Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.    Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.    Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:  (a) You must give any other recipients of the Work or\n      Derivative Works a copy of this License; and  (b) You must cause any modified files to carry prominent notices\n      stating that You changed the files; and  (c) You must retain, in the Source form of any Derivative Works\n      that You distribute, all copyright, patent, trademark, and\n      attribution notices from the Source form of the Work,\n      excluding those notices that do not pertain to any part of\n      the Derivative Works; and  (d) If the Work includes a \"NOTICE\" text file as part of its\n      distribution, then any Derivative Works that You distribute must\n      include a readable copy of the attribution notices contained\n      within such NOTICE file, excluding those notices that do not\n      pertain to any part of the Derivative Works, in at least one\n      of the following places: within a NOTICE text file distributed\n      as part of the Derivative Works; within the Source form or\n      documentation, if provided along with the Derivative Works; or,\n      within a display generated by the Derivative Works, if and\n      wherever such third-party notices normally appear. The contents\n      of the NOTICE file are for informational purposes only and\n      do not modify the License. You may add Your own attribution\n      notices within Derivative Works that You distribute, alongside\n      or as an addendum to the NOTICE text from the Work, provided\n      that such additional attribution notices cannot be construed\n      as modifying the License.  You may add Your own copyright statement to Your modifications and\n  may provide additional or different license terms and conditions\n  for use, reproduction, or distribution of Your modifications, or\n  for any such Derivative Works as a whole, provided Your use,\n  reproduction, and distribution of the Work otherwise complies with\n  the conditions stated in this License.    Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.    Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.    Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.    Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.    Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.    END OF TERMS AND CONDITIONS  APPENDIX: How to apply the Apache License to your work.    To apply the Apache License to your work, attach the following\n  boilerplate notice, with the fields enclosed by brackets \"{}\"\n  replaced with your own identifying information. (Don't include\n  the brackets!)  The text should be enclosed in the appropriate\n  comment syntax for the file format. We also recommend that a\n  file or class name and description of purpose be included on the\n  same \"printed page\" as the copyright notice for easier\n  identification within third-party archives.  Copyright {yyyy} {name of copyright owner}  Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at     http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.",
            "title": "License"
        }
    ]
}